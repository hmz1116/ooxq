/*
add dragon:hmz1116
add shield:hmz1116
position.js - Source Code for XiangQi Wizard Light, Part I

XiangQi Wizard Light - a Chinese Chess Program for JavaScript
Designed by Morning Yellow, Version: 1.0, Last Modified: Sep. 2012
Copyright (C) 2004-2012 www.xqbase.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

"use strict";

function binarySearch(vlss, vl) {
  var low = 0;
  var high = vlss.length - 1;
  while (low <= high) {
    var mid = (low + high) >> 1;
    if (vlss[mid][0] < vl) {
      low = mid + 1;
    } else if (vlss[mid][0] > vl) {
      high = mid - 1;
    } else {
      return mid;
    }
  }
  return -1;
}

var MAX_NINJANUM = 4;

var MTYPE_NORMAL = 0;
var MTYPE_DEVIL = 1;
var MTYPE_DEMON = 2;
var MTYPE_ATTACH = 3;
var MTYPE_PLUSMOVE_SWAP = 4;
var MTYPE_WORM = 5;
var MTYPE_NINJAR2V = 6;
var MTYPE_NINJAV2V = 7;
var MTYPE_NINJAV2R = 8;
var MTYPE_WIND = 9;

var MATE_VALUE = 10000;
var BAN_VALUE = MATE_VALUE - 100;
var WIN_VALUE = MATE_VALUE - 200;
var NULL_SAFE_MARGIN = 400;
var NULL_OKAY_MARGIN = 200;
var DRAW_VALUE = 20;
var ADVANCED_VALUE = 3;

var PLUSKIND_NULL = 0;
var PLUSKIND_ADVISOR = 1;
var PLUSKIND_SWAPADVISOR = 2;
var PLUSKIND_SPEEDADVISOR = 3;
var PCREDSIDE = 32;
var PCBLACKSIDE = 64;
var PCNUM = 32;
var PCNOMAX = 31;
var PIECE_KING = 0;
var PIECE_ADVISOR = 1;
var PIECE_BISHOP = 2;
var PIECE_KNIGHT = 3;
var PIECE_ROOK = 4;
var PIECE_CANNON = 5;
var PIECE_PAWN = 6;
var PIECE_SHIELD = 7;
var PIECE_DRAGON = 8;
var PIECE_VANGUARD = 9;
var PIECE_SHADOW = 10;
var PIECE_PHANTOM = 11;
var PIECE_WIZARD = 12;
var WIZARDPIECE = [0,1,2,3,4,5,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,];
var PIECE_DIAMOND = 13;
var PIECE_STEALTH = 14;
var PIECE_YING = 15;
var PIECE_YANG = 16;
var PIECE_DEVIL = 17;
var PIECE_ASSASSIN = 18;
var PIECE_BREAKTHROUGH = 19;
var PIECE_DEMON = 20;
var PIECE_DIAGONALLY1 = 21;
var PIECE_DIAGONALLY2 = 22;
var PIECE_DIAGONALLY3 = 23;
var PIECE_WORM = 24;
var PIECE_NINJAR = 25;
var PIECE_NINJAV = 26;
var PIECE_THUNDER = 27;
var PIECE_WIND = 28;

var RANK_TOP = 3;
var RANK_BOTTOM = 12;
var FILE_LEFT = 3;
var FILE_RIGHT = 11;

var ADD_PIECE = false;
var DEL_PIECE = true;

var IN_BOARD_ = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

var IN_FORT_ = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

var IN_FLIPFORT_ = [[
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
],
[
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
]];

var IN_DRAGONFORT_ = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

var IN_MYFORT_ = [[
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
],
[
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
]];

var LEGAL_SPAN = [
                       0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 4, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 3, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0,
];

var KNIGHT_PIN_ = [
                              0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,-16,  0,-16,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0, -1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0, -1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0, 16,  0, 16,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,
];

var KING_DELTA = [-16, -1, 1, 16];
var ADVISOR_DELTA = [-17, -15, 15, 17];
var KNIGHT_DELTA = [[-33, -31], [-18, 14], [-14, 18], [31, 33]];
var KNIGHT_CHECK_DELTA = [[-33, -18], [-31, -14], [14, 31], [18, 33]];
var QUEEN_DELTA = [-16, -1, 1, 16, -17, -15, 15, 17];
var BREAKTHROUGH_DELTA = [[-17, -15], [-17, 15], [-15, 17], [15, 17]];
var DEVIL_MPARAM = [[0xa6, 0xa7, 0xa8, 0xb6, 0xb7, 0xb8, 0xc6, 0xc7, 0xc8], [0x36, 0x37, 0x38, 0x46, 0x47, 0x48, 0x56, 0x57, 0x58]];
var MVV_VALUE = [50, 10, 10, 30, 40, 30, 20, 30, 35, 25, 30, 30, 35, 30, 30, 30, 30, 40, 30, 35, 30, 30, 30, 30, 20, 30, 15, 30, 30, 0, 0, 0];

var PIECE_VALUE = [
  [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  9,  9,  9, 11, 13, 11,  9,  9,  9,  0,  0,  0,  0,
    0,  0,  0, 19, 24, 34, 42, 44, 42, 34, 24, 19,  0,  0,  0,  0,
    0,  0,  0, 19, 24, 32, 37, 37, 37, 32, 24, 19,  0,  0,  0,  0,
    0,  0,  0, 19, 23, 27, 29, 30, 29, 27, 23, 19,  0,  0,  0,  0,
    0,  0,  0, 14, 18, 20, 27, 29, 27, 20, 18, 14,  0,  0,  0,  0,
    0,  0,  0,  7,  0, 13,  0, 16,  0, 13,  0,  7,  0,  0,  0,  0,
    0,  0,  0,  7,  0,  7,  0, 15,  0,  7,  0,  7,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0, 11, 15, 11,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 20,  0,  0,  0, 20,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 18,  0,  0, 20, 23, 20,  0,  0, 18,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0, 23,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 20, 20,  0, 20, 20,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 20,  0,  0,  0, 20,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 18,  0,  0, 20, 23, 20,  0,  0, 18,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0, 23,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 20, 20,  0, 20, 20,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 96, 90, 96, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 96,103, 97, 94, 97,103, 96, 90,  0,  0,  0,  0,
    0,  0,  0, 92, 98, 99,103, 99,103, 99, 98, 92,  0,  0,  0,  0,
    0,  0,  0, 93,108,100,107,100,107,100,108, 93,  0,  0,  0,  0,
    0,  0,  0, 90,100, 99,103,104,103, 99,100, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 98,101,102,103,102,101, 98, 90,  0,  0,  0,  0,
    0,  0,  0, 92, 94, 98, 95, 98, 95, 98, 94, 92,  0,  0,  0,  0,
    0,  0,  0, 93, 92, 94, 95, 92, 95, 94, 92, 93,  0,  0,  0,  0,
    0,  0,  0, 85, 90, 92, 93, 78, 93, 92, 90, 85,  0,  0,  0,  0,
    0,  0,  0, 88, 85, 90, 88, 90, 88, 90, 85, 88,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,206,208,207,213,214,213,207,208,206,  0,  0,  0,  0,
    0,  0,  0,206,212,209,216,233,216,209,212,206,  0,  0,  0,  0,
    0,  0,  0,206,208,207,214,216,214,207,208,206,  0,  0,  0,  0,
    0,  0,  0,206,213,213,216,216,216,213,213,206,  0,  0,  0,  0,
    0,  0,  0,208,211,211,214,215,214,211,211,208,  0,  0,  0,  0,
    0,  0,  0,208,212,212,214,215,214,212,212,208,  0,  0,  0,  0,
    0,  0,  0,204,209,204,212,214,212,204,209,204,  0,  0,  0,  0,
    0,  0,  0,198,208,204,212,212,212,204,208,198,  0,  0,  0,  0,
    0,  0,  0,200,208,206,212,200,212,206,208,200,  0,  0,  0,  0,
    0,  0,  0,194,206,204,212,200,212,204,206,194,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,100,100, 96, 91, 90, 91, 96,100,100,  0,  0,  0,  0,
    0,  0,  0, 98, 98, 96, 92, 89, 92, 96, 98, 98,  0,  0,  0,  0,
    0,  0,  0, 97, 97, 96, 91, 92, 91, 96, 97, 97,  0,  0,  0,  0,
    0,  0,  0, 96, 99, 99, 98,100, 98, 99, 99, 96,  0,  0,  0,  0,
    0,  0,  0, 96, 96, 96, 96,100, 96, 96, 96, 96,  0,  0,  0,  0,
    0,  0,  0, 95, 96, 99, 96,100, 96, 99, 96, 95,  0,  0,  0,  0,
    0,  0,  0, 96, 96, 96, 96, 96, 96, 96, 96, 96,  0,  0,  0,  0,
    0,  0,  0, 97, 96,100, 99,101, 99,100, 96, 97,  0,  0,  0,  0,
    0,  0,  0, 96, 97, 98, 98, 98, 98, 98, 97, 96,  0,  0,  0,  0,
    0,  0,  0, 96, 96, 97, 99, 99, 99, 97, 96, 96,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  9,  9,  9, 11, 13, 11,  9,  9,  9,  0,  0,  0,  0,
    0,  0,  0, 19, 24, 34, 42, 44, 42, 34, 24, 19,  0,  0,  0,  0,
    0,  0,  0, 19, 24, 32, 37, 37, 37, 32, 24, 19,  0,  0,  0,  0,
    0,  0,  0, 19, 23, 27, 29, 30, 29, 27, 23, 19,  0,  0,  0,  0,
    0,  0,  0, 14, 18, 20, 27, 29, 27, 20, 18, 14,  0,  0,  0,  0,
    0,  0,  0,  7,  7, 13, 13, 16, 13, 13,  7,  7,  0,  0,  0,  0,
    0,  0,  0,  7,  7,  7,  7, 15,  7,  7,  7,  7,  0,  0,  0,  0,
    0,  0,  0,  5,  5,  5, 10, 10, 10,  5,  5,  5,  0,  0,  0,  0,
    0,  0,  0,  5,  5,  5, 10, 10, 10,  5,  5,  5,  0,  0,  0,  0,
    0,  0,  0,  5,  5,  5, 10, 10, 10,  5,  5,  5,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*盾  //todo*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*龙  //todo*/
   80, 80, 80, 80,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,130,130,126,111,110,111,126,130,130,  0,  0,  0,  0,
    0,  0,  0,128,128,126,132,135,132,126,128,128,  0,  0,  0,  0,
    0,  0,  0,127,127,126,121,122,121,126,127,127,  0,  0,  0,  0,
    0,  0,  0,126,129,129,128,130,128,129,129,126,  0,  0,  0,  0,
    0,  0,  0,136,136,139,136,140,136,139,136,136,  0,  0,  0,  0,
    0,  0,  0,135,136,136,136,140,136,136,136,135,  0,  0,  0,  0,
    0,  0,  0,126,126,126,126,126,126,126,126,126,  0,  0,  0,  0,
    0,  0,  0,117,116,120,119,121,119,120,116,117,  0,  0,  0,  0,
    0,  0,  0,116,117,118,108,104,108,118,117,116,  0,  0,  0,  0,
    0,  0,  0,116,116,117,105,103,105,117,116,116,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 80, 80, 80, 80,
  ],[/*锋*/
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0,  9,  9,  9, 11, 13, 11,  9,  9,  9, 0, 0, 0, 0,
    0, 0, 0, 19, 24, 34, 42, 44, 42, 34, 24, 19, 0, 0, 0, 0,
    0, 0, 0, 38, 48, 64, 74, 74, 74, 64, 48, 38, 0, 0, 0, 0,
    0, 0, 0, 38, 46, 54, 58, 60, 58, 54, 46, 38, 0, 0, 0, 0,
    0, 0, 0, 28, 36, 40, 54, 58, 54, 40, 36, 28, 0, 0, 0, 0,
    0, 0, 0, 14, 14, 26, 26, 32, 26, 26, 14, 14, 0, 0, 0, 0,
    0, 0, 0, 14, 14, 14, 14, 30, 14, 14, 14, 14, 0, 0, 0, 0,
    0, 0, 0, 10, 10, 10, 20, 20, 20, 10, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 10, 10, 10, 20, 20, 20, 10, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 10, 10, 10, 20, 20, 20, 10, 10, 10, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],[/*影*/
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],[/*幻*/
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],[/*巫*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*坚*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90,120, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90,120, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90,120, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*隐*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  100,100,100,100,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,100,100,100,100,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[ /*阴*/
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],[ /*阳*/
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],[/*魔*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,240,240,240,240,240,240,240,240,240,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*刺*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*破*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,140,140,140,140,140,140,140,140,140,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*妖*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*勇*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*谋*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*速*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*石*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 75, 75, 75, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 80, 85, 80, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 75, 75, 75, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0, 50, 50, 50, 50, 50, 50, 50, 50, 50,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*忍R*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90,100,120, 90, 90, 90,120,100, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90,100, 90, 90, 90,100, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90,100, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*忍V*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 45, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 45, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 50, 60, 45, 45, 45, 60, 50, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 50, 45, 45, 45, 50, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 45, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 45, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 45, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 50, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 45, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0, 45, 45, 45, 45, 45, 45, 45, 45, 45,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*雷*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],[/*风*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ],
];

var PLUSKIND_VALUE = [
  [/**/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [/*勇*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [/*谋*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], [/*速*/
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 90, 90, 90, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ], 
];

function IN_BOARD(sq) {
  return IN_BOARD_[sq] != 0;
}

function IN_FORT(sq) {
  return IN_FORT_[sq] != 0;
}

function IN_DRAGONFORT(sq) {
  return IN_DRAGONFORT_[sq] != 0;
}

function IN_MYFORT(sd, sq) {
  return IN_MYFORT_[sd][sq] != 0;
}

function IN_FLIPFORT(sd, sq) {
  return IN_FLIPFORT_[sd][sq] != 0;
}

function RANK_Y(sq) {
  return sq >> 4;
}

function FILE_X(sq) {
  return sq & 15;
}

function COORD_XY(x, y) {
  return x + (y << 4);
}

function SQUARE_FLIP(sq) {
  return 254 - sq;
}

function FILE_FLIP(x) {
  return 14 - x;
}

function RANK_FLIP(y) {
  return 15 - y;
}

function MIRROR_SQUARE(sq) {
  return COORD_XY(FILE_FLIP(FILE_X(sq)), RANK_Y(sq));
}

function SQUARE_FORWARD(sq, sd) {
  return sq - 16 + (sd << 5);
}

function KING_SPAN(sqSrc, sqDst) {
  return LEGAL_SPAN[sqDst - sqSrc + 256] == 1;
}

function ADVISOR_SPAN(sqSrc, sqDst) {
  return LEGAL_SPAN[sqDst - sqSrc + 256] == 2;
}

function BISHOP_SPAN(sqSrc, sqDst) {
  return LEGAL_SPAN[sqDst - sqSrc + 256] == 3;
}

function DIAMOND_SPAN(sqSrc, sqDst) {
  return LEGAL_SPAN[sqDst - sqSrc + 256] == 4;
}

function DEMON_SPAN(sqSrc, sqDst) {
  return LEGAL_SPAN[sqDst - sqSrc + 256] >= 3;
}

function BISHOP_PIN(sqSrc, sqDst) {
  return (sqSrc + sqDst) >> 1;
}

function DEMON_PIN(sqSrc, sqDst) {
  return (sqSrc + sqDst) >> 1;
}

function KNIGHT_PIN(sqSrc, sqDst) {
  return sqSrc + KNIGHT_PIN_[sqDst - sqSrc + 256];
}

function HOME_HALF(sq, sd) {
  return (sq & 0x80) != (sd << 7);
}

function AWAY_HALF(sq, sd) {
  return (sq & 0x80) == (sd << 7);
}

function SAME_HALF(sqSrc, sqDst) {
  return ((sqSrc ^ sqDst) & 0x80) == 0;
}

function SAME_RANK(sqSrc, sqDst) {
  return ((sqSrc ^ sqDst) & 0xf0) == 0;
}

function SAME_FILE(sqSrc, sqDst) {
  return ((sqSrc ^ sqDst) & 0x0f) == 0;
}

function SIDE_TAG(sd) {
  return 32 + (sd << 5);
}

function OPP_SIDE_TAG(sd) {
  return 64 - (sd << 5);
}

function SRC(mv) {
  return mv & 255;
}

function DST(mv) {
  return (mv >> 8) & 255;
}

function DG(sqsrc,sqdst) {
  switch(sqdst){
    case 2:
      return sqsrc+16;
    case 4:
      return sqsrc-1;
    case 6:
      return sqsrc+1;
    case 8:
      return sqsrc-16;
    default:
      return 0;
  }
}

function MPARAM(mv) {
  return (mv >> 16) & 255;
}

function MTYPE(mv) {
  return (mv >> 24) & 255;
}

function MOVE() {
  if(arguments.length == 2){
    var sqSrc = arguments[0];
    var sqDst = arguments[1];
    return sqSrc + (sqDst << 8);
  }
  else if(arguments.length == 4){
    var sqSrc = arguments[0];
    var sqDst = arguments[1];
    var mType = arguments[2];
    var mParam = arguments[3];
    return sqSrc + (sqDst << 8) + (mParam << 16) + (mType << 24);
  }
  else {
    return 0;
  }
}

function MIRROR_MOVE(mv) {
  var mType = MTYPE(mv);
  return ((mType == MTYPE_NORMAL) ? MOVE(MIRROR_SQUARE(SRC(mv)), MIRROR_SQUARE(DST(mv))) : MOVE(MIRROR_SQUARE(SRC(mv)), MIRROR_SQUARE(DST(mv)), mType, MIRROR_SQUARE(MPARAM(mv))));
}

function MVV_LVA(pc, lva) {
  return MVV_VALUE[pc & PCNOMAX] - lva;
}

function CHR(n) {
  return String.fromCharCode(n);
}

function ASC(c) {
  return c.charCodeAt(0);
}

var FEN_PIECE = "                KABNRCPSDVXFWTZ kabnrcpsdvxfwtz ";

function CHAR_TO_PIECE(c) {
  switch (c) {
  case "K":
    return PIECE_KING;
  case "A":
    return PIECE_ADVISOR;
  case "B":
  case "E":
    return PIECE_BISHOP;
  case "H":
  case "N":
    return PIECE_KNIGHT;
  case "R":
    return PIECE_ROOK;
  case "C":
    return PIECE_CANNON;
  case "P":
    return PIECE_PAWN;
  case "S":
    return PIECE_SHIELD;
  case "D":
    return PIECE_DRAGON;
  case "V":
    return PIECE_VANGUARD;
  case "X":
    return PIECE_SHADOW;
  case "F":
    return PIECE_PHANTOM;
  case "W":
    return PIECE_WIZARD;
  case "T":
    return PIECE_DIAMOND;
  case "Z":
    return PIECE_STEALTH;
  case "U":
    return PIECE_YING;
  case "O":
    return PIECE_YANG;
  case "L":
    return PIECE_DEVIL;
  case "I":
    return PIECE_ASSASSIN;
  case "BT":
    return PIECE_BREAKTHROUGH;
  case "DM":
    return PIECE_DEMON;
  case "D1":
    return PIECE_DIAGONALLY1;
  case "D2":
    return PIECE_DIAGONALLY2;
  case "D3":
    return PIECE_DIAGONALLY3;
  case "WM":
    return PIECE_WORM;
  case "NJR":
    return PIECE_NINJAR;
  case "NJV":
    return PIECE_NINJAV;
  case "TD":
    return PIECE_THUNDER;
  case "WD":
    return PIECE_WIND;
  default:
    return -1;
  }
}

function RC4(key) {
  this.x = this.y = 0;
  this.state = [];
  for (var i = 0; i < 256; i ++) {
    this.state.push(i);
  }
  var j = 0;
  for (var i = 0; i < 256; i ++) {
    j = (j + this.state[i] + key[i % key.length]) & 0xff;
    this.swap(i, j);
  }
}

RC4.prototype.swap = function(i, j) {
  var t = this.state[i];
  this.state[i] = this.state[j];
  this.state[j] = t;
}

RC4.prototype.nextByte = function() {
  this.x = (this.x + 1) & 0xff;
  this.y = (this.y + this.state[this.x]) & 0xff;
  this.swap(this.x, this.y);
  var t = (this.state[this.x] + this.state[this.y]) & 0xff;
  return this.state[t];
}

RC4.prototype.nextLong = function() {
  var n0 = this.nextByte();
  var n1 = this.nextByte();
  var n2 = this.nextByte();
  var n3 = this.nextByte();
  return n0 + (n1 << 8) + (n2 << 16) + ((n3 << 24) & 0xffffffff);
}

var PreGen_zobristKeyPlayer, PreGen_zobristLockPlayer;
var PreGen_zobristKeyTable = [], PreGen_zobristLockTable = [];

var rc4 = new RC4([0]);
PreGen_zobristKeyPlayer = rc4.nextLong();
rc4.nextLong();
PreGen_zobristLockPlayer = rc4.nextLong();
for (var i = 0; i < 56 + 8; i ++) {//z
  var keykeys = [];
  var locklocks = [];
  for (var k = 0; k < 2; k++){
    var keys = [];
    var locks = [];
    for (var j = 0; j < 256; j ++) {
      keys.push(rc4.nextLong());
      rc4.nextLong();
      locks.push(rc4.nextLong());
    }
    keykeys.push(keys);
    locklocks.push(locks);
  }
  PreGen_zobristKeyTable.push(keykeys);
  PreGen_zobristLockTable.push(locklocks);
}

function Position() {
  // sdPlayer, zobristKey, zobristLock, vlWhite, vlBlack, distance;
  // squares, mvList, pcList, keyList, chkList;
  this.bwizard4generate = false;
  this.bwizard4legal = false;
  this.bwizard4checked = false;
  this.bwizard4shield = false;
  this.sqwizard4generate = 0;
  this.sqwizard4legal = 0;
  this.sqwizard4checked = 0;
  this.sqwizard4shield = 0;
  this.pushpclist = [];
  this.pushsqlist = [];
  this.lastmovepc = [PIECE_WIZARD,PIECE_WIZARD];
  this.sqCheck = [
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  ];
  this.kingState = [false, false, false];
  this.wormCounter = [0, 0];
  this.pieceCounter = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],];
  this.ninjaMaxNum = [MAX_NINJANUM, MAX_NINJANUM];
}

Position.prototype.clearBoard = function() {
  this.sdPlayer = 0;
  this.squares = [];
  for (var sq = 0; sq < 256; sq ++) {
    this.squares.push(0);
  }
  this.zobristKey = this.zobristLock = 0;
  this.vlWhite = this.vlBlack = 0;

  this.pksquares = [];
  for (var sq = 0; sq < 256; sq ++) {
    this.pksquares.push(0);
  }

  this.kingState = [false, false, false];
  this.wormCounter = [0, 0];
  this.pieceCounter = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],];
  this.ninjaMaxNum = [MAX_NINJANUM, MAX_NINJANUM];
};

Position.prototype.setIrrev = function() {
  this.mvList = [0];
  this.pcList = [0];
  this.keyList = [0];
  this.chkList = [this.checked()];
  this.distance = 0;
}

Position.prototype.addPiece = function(sq, pc, bDel) {
  var pcAdjust;
  this.squares[sq] = bDel ? 0 : pc;
  if (pc < PCBLACKSIDE) {
    pcAdjust = pc - PCREDSIDE;
    this.vlWhite += bDel ? -PIECE_VALUE[pcAdjust][sq] :
        PIECE_VALUE[pcAdjust][sq];
    if (pcAdjust == PIECE_WORM) this.wormCounter[0] += bDel ? -1 : 1;
    this.pieceCounter[0][pcAdjust] += bDel ? -1 : 1;
  } else {
    pcAdjust = pc - PCBLACKSIDE;
    this.vlBlack += bDel ? -PIECE_VALUE[pcAdjust][SQUARE_FLIP(sq)] :
        PIECE_VALUE[pcAdjust][SQUARE_FLIP(sq)];
    if (pcAdjust == PIECE_WORM) this.wormCounter[1] += bDel ? -1 : 1;
    this.pieceCounter[1][pcAdjust] += bDel ? -1 : 1;
    pcAdjust += 28;//z
  }
  this.zobristKey ^= PreGen_zobristKeyTable[pcAdjust][0][sq];
  this.zobristLock ^= PreGen_zobristLockTable[pcAdjust][0][sq];
}

Position.prototype.addPluskind = function(sq, pk, bDel) {
  var pkAdjust;
  this.pksquares[sq] = bDel ? 0 : pk;
  if (pk < PCBLACKSIDE) {
    pkAdjust = pk - PCREDSIDE;
    this.vlWhite += bDel ? -PLUSKIND_VALUE[pkAdjust][sq] : PLUSKIND_VALUE[pkAdjust][sq];
  } else {
    pkAdjust = pk - PCBLACKSIDE;
    this.vlBlack += bDel ? -PLUSKIND_VALUE[pkAdjust][SQUARE_FLIP(sq)] : PLUSKIND_VALUE[pkAdjust][SQUARE_FLIP(sq)];
    pkAdjust += 4;//z
  }
  this.zobristKey ^= PreGen_zobristKeyTable[56 + pkAdjust][1][sq];//z
  this.zobristLock ^= PreGen_zobristLockTable[56 + pkAdjust][1][sq];//z
}

Position.prototype.movePiece = function(mv) {
  var mType = MTYPE(mv);
  var mParam = MPARAM(mv);
  var sqSrc = SRC(mv);
  var sqDst = DST(mv);
  var pcSrc = this.squares[sqSrc];
  var pcDst = 0;
  var sqDg = 0;
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  var pcOppSide = OPP_SIDE_TAG(this.sdPlayer);
  if(sqDst < 0x10){
    //出龙走法
    sqDg = DG(sqSrc,sqDst);
    sqDst = sqDg;
  }
  else if (mType == MTYPE_WIND){
    sqSrc = sqDst;
    pcSrc = this.squares[sqSrc];
    sqDst = mParam;
  }
  pcDst = this.squares[sqDst];

  if (pcDst == pcOppSide + PIECE_NINJAR) {
    this.ninjaMaxNum[1 - this.sdPlayer] -= 2;
  }
  else if (pcDst == pcOppSide + PIECE_NINJAV) {
    if (this.pieceCounter[1 - this.sdPlayer][PIECE_NINJAV] % 2 == 1) {
      this.ninjaMaxNum[1 - this.sdPlayer] -= 2;
    }
  }
  
  if(mType == MTYPE_DEVIL || mType == MTYPE_DEMON){
    var pa = this.squares[mParam];
    this.pcList.push(pa);
    this.addPiece(mParam, pa, DEL_PIECE);
    pa = this.pksquares[mParam];
    this.pcList.push(pa);
    this.addPluskind(mParam,pa,DEL_PIECE);
  }

  {
    var pkDst = this.pksquares[sqDst];
    var bswap = (pcSrc == pcSelfSide+PIECE_PHANTOM && (pcDst & pcSelfSide) != 0) || mType == MTYPE_PLUSMOVE_SWAP;
    this.pcList.push(pkDst);
    if (pkDst > 0) {
      this.addPluskind(sqDst, pkDst, DEL_PIECE);
    }
    var pkSrc = this.pksquares[sqSrc];
    if (mType != MTYPE_WORM) this.addPluskind(sqSrc, pkSrc, DEL_PIECE);
    if (mType == MTYPE_NINJAR2V){
      this.addPluskind(sqSrc, pkSrc, ADD_PIECE);
      this.addPluskind(sqDst, pkSrc, ADD_PIECE);
    }
    else if (mType == MTYPE_NINJAV2V){
      this.addPluskind(sqSrc, pkSrc, ADD_PIECE);
      this.addPluskind(sqDst, pkSrc, ADD_PIECE);
    }
    else this.addPluskind(sqDst, pkSrc, ADD_PIECE);
    if (sqDg > 0) {
      this.addPluskind(this.sdPlayer, pcSelfSide + PLUSKIND_NULL, DEL_PIECE);
      this.addPluskind(sqSrc, pcSelfSide + PLUSKIND_NULL, ADD_PIECE);
    }
    if(bswap)this.addPluskind(sqSrc, pkDst, ADD_PIECE);
  }
  
  if (mType == MTYPE_ATTACH) {
    var pk = this.pksquares[sqDst];
    this.pcList.push(pk);
    if (pk > 0) {
      this.addPluskind(sqDst, pk, DEL_PIECE);
    }
    switch (pcSrc & PCNOMAX) {
      case PIECE_DIAGONALLY1:
        this.addPluskind(sqDst, pcSelfSide + PLUSKIND_ADVISOR, ADD_PIECE);
        break;
      case PIECE_DIAGONALLY2:
        this.addPluskind(sqDst, pcSelfSide + PLUSKIND_SWAPADVISOR, ADD_PIECE);
        break;
      case PIECE_DIAGONALLY3:
        this.addPluskind(sqDst, pcSelfSide + PLUSKIND_SPEEDADVISOR, ADD_PIECE);
        break;
    }
    this.pcList.push(pcSrc);
    this.addPiece(sqSrc, pcSrc, DEL_PIECE);
  }
  else {
    var pc = this.squares[sqDst];
  
    var bswap = (pcSrc == pcSelfSide+PIECE_PHANTOM && (pc & pcSelfSide) != 0) || mType == MTYPE_PLUSMOVE_SWAP;
    var b2ying = (pcSrc == pcSelfSide + PIECE_YANG && (KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst)));
    var b2yang = (pcSrc == pcSelfSide + PIECE_YING && (KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst)));
    
    this.pcList.push(pc);
    if (pc > 0) {
      this.addPiece(sqDst, pc, DEL_PIECE);
      pcDst = pc;
    }
    pc = this.squares[sqSrc];
    if (mType != MTYPE_WORM) this.addPiece(sqSrc, pc, DEL_PIECE);
    if (mType == MTYPE_NINJAR2V) {
      this.addPiece(sqSrc, pcSelfSide + PIECE_NINJAV, ADD_PIECE);
      this.addPiece(sqDst, pcSelfSide + PIECE_NINJAV, ADD_PIECE);
    }
    else if (mType == MTYPE_NINJAV2V) {
      this.addPiece(sqSrc, pcSelfSide + PIECE_NINJAV, ADD_PIECE);
      this.addPiece(sqDst, pcSelfSide + PIECE_NINJAV, ADD_PIECE);
    }
    else if (mType == MTYPE_NINJAV2R) {
      this.addPiece(sqDst, pc - 1, ADD_PIECE);
    }
    else if (b2ying) this.addPiece(sqDst, pc - 1, ADD_PIECE);
    else if (b2yang) this.addPiece(sqDst, pc + 1, ADD_PIECE);
    else this.addPiece(sqDst, pc, ADD_PIECE);
    if(sqDg > 0){
      this.addPiece(this.sdPlayer, pcSelfSide+PIECE_DRAGON, DEL_PIECE);
      this.addPiece(sqSrc, pcSelfSide+PIECE_DRAGON, ADD_PIECE);
    }
    if(bswap)this.addPiece(sqSrc, pcDst, ADD_PIECE);
  }
  
  this.mvList.push(mv);
}

Position.prototype.undoMovePiece = function() {
  var mv = this.mvList.pop();
  var mType = MTYPE(mv);
  var mParam = MPARAM(mv);
  var sqSrc = SRC(mv);
  var sqDst = DST(mv);
  var pcSrc = this.squares[sqSrc];
  var pcDst = this.squares[sqDst];
  var sqDg = 0;
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  var pcOppSide = OPP_SIDE_TAG(this.sdPlayer);
  
  if(sqDst < 0x10){
    //出龙走法
    sqDg = DG(sqSrc,sqDst);
    sqDst = sqDg;
    
    this.addPiece(sqSrc, pcSelfSide+PIECE_DRAGON, DEL_PIECE);
    this.addPiece(this.sdPlayer, pcSelfSide+PIECE_DRAGON, ADD_PIECE);
  }
  else if (mType == MTYPE_WIND){
    sqSrc = sqDst;
    pcSrc = pcDst;
    sqDst = mParam;
    pcDst = this.squares[sqDst];
  }

  if (mType == MTYPE_ATTACH){
    var pc = this.pcList.pop();
    this.addPiece(sqSrc, pc, ADD_PIECE);
    this.addPluskind(sqDst, this.pksquares[sqDst], DEL_PIECE);
    var pk = this.pcList.pop();
    if (pk > 0) {
      this.addPluskind(sqDst, pk, ADD_PIECE);
    }
  }
  else {
    var bswap = (pcDst == pcSelfSide+PIECE_PHANTOM && (pcSrc & pcSelfSide) != 0) || mType == MTYPE_PLUSMOVE_SWAP;
    var b2ying = (pcDst == pcSelfSide + PIECE_YING && (KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst)));
    var b2yang = (pcDst == pcSelfSide + PIECE_YANG && (KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst)));

    if(bswap)this.addPiece(sqSrc, pcSrc, DEL_PIECE);
    var pc = this.squares[sqDst];
    this.addPiece(sqDst, pc, DEL_PIECE);

    if (b2ying) this.addPiece(sqSrc, pc + 1, ADD_PIECE);
    else if (b2yang) this.addPiece(sqSrc, pc - 1, ADD_PIECE);
    else if (mType == MTYPE_NINJAR2V){
      this.addPiece(sqSrc, pc, DEL_PIECE);
      this.addPiece(sqSrc, pc -1, ADD_PIECE);
    }
    else if (mType == MTYPE_NINJAV2V){

    }
    else if (mType == MTYPE_NINJAV2R){
      this.addPiece(sqSrc, pc + 1, ADD_PIECE);
    }
    else if (mType != MTYPE_WORM) this.addPiece(sqSrc, pc, ADD_PIECE);
    pc = this.pcList.pop();
    if (pc > 0) {
      this.addPiece(sqDst, pc, ADD_PIECE);
    }
  }

  {
    var pkSrc = this.pksquares[sqSrc];
    var bswap = (pcDst == pcSelfSide+PIECE_PHANTOM && (pcSrc & pcSelfSide) != 0) || mType == MTYPE_PLUSMOVE_SWAP;
    if(bswap)this.addPluskind(sqSrc, pkSrc, DEL_PIECE);
    if (sqDg > 0) {
      this.addPluskind(sqSrc, pcSelfSide + PLUSKIND_NULL, DEL_PIECE);
      this.addPluskind(this.sdPlayer, pcSelfSide + PLUSKIND_NULL, ADD_PIECE);
    }
    var pkDst = this.pksquares[sqDst];
    this.addPluskind(sqDst, pkDst, DEL_PIECE);
    if (mType == MTYPE_NINJAR2V) {
      this.addPluskind(sqSrc, pkDst, DEL_PIECE);
    }
    else if (mType == MTYPE_NINJAV2V) {
      this.addPluskind(sqSrc, pkDst, DEL_PIECE);
    }
    if (mType != MTYPE_WORM) this.addPluskind(sqSrc, pkDst, ADD_PIECE);
    pkDst = this.pcList.pop();
    if (pkDst > 0) {
      this.addPluskind(sqDst, pkDst, ADD_PIECE);
    }
  }
  
  if(mType == MTYPE_DEVIL || mType == MTYPE_DEMON){
    pc = this.pcList.pop();
    this.addPluskind(mParam,pc,ADD_PIECE);
    pc = this.pcList.pop();
    this.addPiece(mParam, pc, ADD_PIECE);
  }

  {
    var pc = this.squares[sqDst];
    if (pc == pcOppSide + PIECE_NINJAR) {
      this.ninjaMaxNum[1 - this.sdPlayer] += 2;
    }
    else if (pc == pcOppSide + PIECE_NINJAV) {
      if (this.pieceCounter[1 - this.sdPlayer][PIECE_NINJAV] % 2 == 1) {
        this.ninjaMaxNum[1 - this.sdPlayer] += 2;
      }
    }
  }
}

Position.prototype.changeSide = function() {
  this.sdPlayer = 1 - this.sdPlayer;
  this.zobristKey ^= PreGen_zobristKeyPlayer;
  this.zobristLock ^= PreGen_zobristLockPlayer;
}

Position.prototype.makeMove = function(mv) {
  this.lastmovepc[this.sdPlayer] = this.squares[SRC(mv)] & PCNOMAX;
  var zobristKey = this.zobristKey;
  this.movePiece(mv);
  if (this.checked()) {//todo
    this.undoMovePiece(mv);
    return false;
  }
  this.keyList.push(zobristKey);
  this.changeSide();
  this.chkList.push(this.checked());
  this.distance ++;
  return true;
}

Position.prototype.undoMakeMove = function() {
  this.distance --;
  this.chkList.pop();
  this.changeSide();
  this.keyList.pop();
  this.undoMovePiece();
  if(this.mvList.length > 0){
    var mv = this.mvList[this.mvList.length-1];
    var sqSrc = SRC(mv);
    var sqDst = DST(mv);
    if(sqDst < 0x10)sqDst = DG(sqSrc,sqDst);
    this.lastmovepc[1-this.sdPlayer] = this.squares[sqDst] & PCNOMAX;
    if(this.mvList.length > 1){
      mv = this.mvList[this.mvList.length-2];
      sqSrc = SRC(mv);
      sqDst = DST(mv);
      if(sqDst < 0x10)sqDst = DG(sqSrc,sqDst);
      this.lastmovepc[this.sdPlayer] = this.squares[sqDst] & PCNOMAX;
    }
    else{
      this.lastmovepc[this.sdPlayer] = PIECE_WIZARD;
    }
  }
  else{
    this.lastmovepc[1-this.sdPlayer] = PIECE_WIZARD;
    this.lastmovepc[this.sdPlayer] = PIECE_WIZARD;
  }
}

Position.prototype.nullMove = function() {
  this.mvList.push(0);
  this.pcList.push(0);
  this.keyList.push(this.zobristKey);
  this.changeSide();
  this.chkList.push(false);
  this.distance ++;
}

Position.prototype.undoNullMove = function() {
  this.distance --;
  this.chkList.pop();
  this.changeSide();
  this.keyList.pop();
  this.pcList.pop();
  this.mvList.pop();
}

Position.prototype.fromFen = function(fen) {
  this.clearBoard();
  var y = RANK_TOP;
  var x = FILE_LEFT;
  var index = 0;
  if (index == fen.length) {
    this.setIrrev();
    return;
  }
  var c = fen.charAt(index);
  while (c != " ") {
    if (c == "/") {
      x = FILE_LEFT;
      y ++;
      if (y > RANK_BOTTOM) {
        break;
      }
    } else if (c == "[") {
      index++;
      c = fen.charAt(index);
      var pcside = (c >= "A" && c <= "Z") ? PCREDSIDE : PCBLACKSIDE;
      var pcstr = "";
      while (c != "]") {
        pcstr += c;
        index ++;
        if (index == fen.length) {
          this.setIrrev();
          return;
        }
        c = fen.charAt(index);
      }
      if (x <= FILE_RIGHT) {
        var pt = CHAR_TO_PIECE(pcstr.toUpperCase());
        if (pt >= 0) {
          this.addPiece(COORD_XY(x, y), pt + pcside, ADD_PIECE);
          this.addPluskind(COORD_XY(x, y), PLUSKIND_NULL + pcside, ADD_PIECE);
        }
        x ++;
      }
    } else if (c >= "1" && c <= "9") {
      x += (ASC(c) - ASC("0"));
    } else if (c >= "A" && c <= "Z") {
      if (x <= FILE_RIGHT) {
        var pt = CHAR_TO_PIECE(c);
        if (pt >= 0) {
          this.addPiece(COORD_XY(x, y), pt + PCREDSIDE, ADD_PIECE);
          this.addPluskind(COORD_XY(x, y), PLUSKIND_NULL + PCREDSIDE, ADD_PIECE);
        }
        x ++;
      }
    } else if (c >= "a" && c <= "z") {
      if (x <= FILE_RIGHT) {
        var pt = CHAR_TO_PIECE(CHR(ASC(c) + ASC("A") - ASC("a")));
        if (pt >= 0) {
          this.addPiece(COORD_XY(x, y), pt + PCBLACKSIDE, ADD_PIECE);
          this.addPluskind(COORD_XY(x, y), PLUSKIND_NULL + PCBLACKSIDE, ADD_PIECE);
        }
        x ++;
      }
    }
    index ++;
    if (index == fen.length) {
      this.setIrrev();
      return;
    }
    c = fen.charAt(index);
  }
  index++;
  if(fen.charAt(index) == "D"){
    this.addPiece(0, PIECE_DRAGON + PCREDSIDE, ADD_PIECE);
    this.addPluskind(0, PLUSKIND_NULL + PCREDSIDE, ADD_PIECE);
  }
  index++;
  if(fen.charAt(index) == "d"){
    this.addPiece(1, PIECE_DRAGON + PCBLACKSIDE, ADD_PIECE);
    this.addPluskind(1, PLUSKIND_NULL + PCBLACKSIDE, ADD_PIECE);
  }
  index ++;
  if (index == fen.length) {
    this.setIrrev();
    return;
  }
  if (this.sdPlayer == (fen.charAt(index) == "b" ? 0 : 1)) {
    this.changeSide();
  }
  this.setIrrev();
}

Position.prototype.toFen = function() {
  var fen = "";
  for (var y = RANK_TOP; y <= RANK_BOTTOM; y ++) {
    var k = 0;
    for (var x = FILE_LEFT; x <= FILE_RIGHT; x ++) {
      var pc = this.squares[COORD_XY(x, y)];
      if (pc > 0) {
        if (k > 0) {
          fen += CHR(ASC("0") + k);
          k = 0;
        }
        fen += FEN_PIECE.charAt(pc);
      } else {
        k ++;
      }
    }
    if (k > 0) {
      fen += CHR(ASC("0") + k);
    }
    fen += "/";
  }
  return fen.substring(0, fen.length - 1) +
      (this.sdPlayer == 0 ? " w" : " b");
}

Position.prototype.generateMoves = function(vls) {
  var mvs = [];
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  var pcOppSide = OPP_SIDE_TAG(this.sdPlayer);
  
  for (var sqSrc = 0; sqSrc < 256; sqSrc ++) {
    var pcSrc = this.squares[sqSrc];
    var oldpcSrc = 0;
    if ((pcSrc & pcSelfSide) == 0) {
      continue;
    }

    var pkSrc = this.pksquares[sqSrc];
    if (pkSrc != 0){
      switch (pkSrc - pcSelfSide) {
        case PLUSKIND_ADVISOR:
          for (var i = 0; i < 4; i ++) {
            var sqDst = sqSrc + ADVISOR_DELTA[i];
            if (!IN_BOARD(sqDst)) {
              continue;
            }
            var pcDst = this.squares[sqDst];
            if((pcDst & PCNOMAX) == PIECE_DIAMOND){
              continue;
            }
            if (vls == null) {
              if ((pcDst & pcSelfSide) == 0) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            } else if ((pcDst & pcOppSide) != 0) {
              mvs.push(MOVE(sqSrc, sqDst));
              vls.push(MVV_LVA(pcDst, 1));
            }
          }
          break;
        case PLUSKIND_SWAPADVISOR:
          for (var i = 0; i < 4; i ++) {
            var sqDst = sqSrc + ADVISOR_DELTA[i];
            if (!IN_BOARD(sqDst)) {
              continue;
            }
            var pcDst = this.squares[sqDst];
            if (vls == null) {
              if (pcDst == 0){
                mvs.push(MOVE(sqSrc, sqDst));
              }
              else if ((pcDst & pcSelfSide) != 0 && (pcDst & PCNOMAX) > PIECE_BISHOP){
                mvs.push(MOVE(sqSrc, sqDst, MTYPE_PLUSMOVE_SWAP, 0));
              }
            }
          }
          break;
        case PLUSKIND_SPEEDADVISOR:
          for (var i = 0; i < 4; i ++) {
            var delta = ADVISOR_DELTA[i];
            var sqDst = sqSrc + ADVISOR_DELTA[i];
            for (var j = 0; j < 2; j++){
              if (IN_BOARD(sqDst)){
                var pcDst = this.squares[sqDst];
                if((pcDst & PCNOMAX) == PIECE_DIAMOND){
                  continue;
                }
                if (pcDst == 0){
                  if (vls == null) {
                    mvs.push(MOVE(sqSrc, sqDst));
                  }
                }
                else {
                  break;
                }
              }
              sqDst += delta;
            }
          }
          break;
      }
    }

    if(!this.bwizard4generate){
      this.bwizard4generate = (pcSrc & PCNOMAX) == PIECE_WIZARD;
      if(this.bwizard4generate){
        this.sqwizard4generate = sqSrc;
        oldpcSrc = pcSrc;
        this.squares[sqSrc] = pcSelfSide+WIZARDPIECE[this.lastmovepc[1-this.sdPlayer]];
        pcSrc = this.squares[sqSrc];
        this.squares[sqSrc] = pcSrc;
      }
    }
    switch (pcSrc - pcSelfSide) {
    /*case PIECE_KING:
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + KING_DELTA[i];
        if (!IN_FORT(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if (vls == null) {
          if ((pcDst & pcSelfSide) == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        } else if ((pcDst & pcOppSide) != 0) {
          mvs.push(MOVE(sqSrc, sqDst));
          vls.push(MVV_LVA(pcDst, 5));
        }
      }
      break;*/
    case PIECE_KING:
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + KING_DELTA[i];
        if ((this.bwizard4generate ? !IN_BOARD(sqDst) : !IN_FORT(sqDst))) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if ((pcDst & pcSelfSide) == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        } else if ((pcDst & pcOppSide) != 0) {
          mvs.push(MOVE(sqSrc, sqDst));
          vls.push(MVV_LVA(pcDst, 5));
        }
      }
      if(this.bDragon(this.sdPlayer)){
        for (var i = 0; i < 4; i ++) {
          var sqDst = sqSrc + KING_DELTA[i];
          if ((this.bwizard4generate ? true : !IN_FORT(sqDst))) {
            continue;
          }
          var di = 0;
          switch(KING_DELTA[i]){
            case 16:
              di = 2;
              break;
            case -1:
              di = 4;
              break;
            case 1:
              di = 6;
              break;
            case -16:
              di = 8;
              break;
            default:
              di = 0;
          }
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            continue;
          }
          if (vls == null) {
            if ((pcDst & pcSelfSide) == 0) {
              mvs.push(MOVE(sqSrc, di));
            }
          } else if ((pcDst & pcOppSide) != 0) {
            mvs.push(MOVE(sqSrc, di));
            vls.push(MVV_LVA(pcDst, 5));
          }
        }
      }
      break;
    case PIECE_ADVISOR:
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if ((this.bwizard4generate ? !IN_BOARD(sqDst) : !IN_FORT(sqDst))) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if ((pcDst & pcSelfSide) == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        } else if ((pcDst & pcOppSide) != 0) {
          mvs.push(MOVE(sqSrc, sqDst));
          vls.push(MVV_LVA(pcDst, 1));
        }
      }
      break;
    case PIECE_BISHOP:
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if (!(IN_BOARD(sqDst) && (this.bwizard4generate ? IN_BOARD(sqDst) : HOME_HALF(sqDst, this.sdPlayer)) && this.squares[sqDst] == 0)) {
          continue;
        }
        sqDst += ADVISOR_DELTA[i];
	if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if ((pcDst & pcSelfSide) == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        } else if ((pcDst & pcOppSide) != 0) {
          mvs.push(MOVE(sqSrc, sqDst));
          vls.push(MVV_LVA(pcDst, 1));
        }
      }
      break;
    case PIECE_KNIGHT:
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + KING_DELTA[i];
        if (this.squares[sqDst] > 0) {
          continue;
        }
        for (var j = 0; j < 2; j ++) {
          sqDst = sqSrc + KNIGHT_DELTA[i][j];
          if (!IN_BOARD(sqDst)) {
            continue;
          }
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            continue;
          }
          if (vls == null) {
            if ((pcDst & pcSelfSide) == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else if ((pcDst & pcOppSide) != 0) {
            mvs.push(MOVE(sqSrc, sqDst));
            vls.push(MVV_LVA(pcDst, 1));
          }
        }
      }
      break;
    case PIECE_ROOK:
      for (var i = 0; i < 4; i ++) {
        var delta = KING_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            break;
          }
          if (pcDst == 0) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else {
            if ((pcDst & pcOppSide) != 0) {
              mvs.push(MOVE(sqSrc, sqDst));
              if (vls != null) {
                vls.push(MVV_LVA(pcDst, 4));
              }
            }
            break;
          }
          sqDst += delta;
        }
      }
      break;
    case PIECE_CANNON:
      for (var i = 0; i < 4; i ++) {
        var delta = KING_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if (pcDst == 0) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else {
            break;
          }
          sqDst += delta;
        }
        sqDst += delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            break;
          }
          if (pcDst > 0) {
            if ((pcDst & pcOppSide) != 0) {
              mvs.push(MOVE(sqSrc, sqDst));
              if (vls != null) {
                vls.push(MVV_LVA(pcDst, 4));
              }
            }
            break;
          }
          sqDst += delta;
        }
      }
      break;
    case PIECE_PAWN:
      var sqDst = SQUARE_FORWARD(sqSrc, this.sdPlayer);
      if (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) != PIECE_DIAMOND){
          if (vls == null) {
            if ((pcDst & pcSelfSide) == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else if ((pcDst & pcOppSide) != 0) {
            mvs.push(MOVE(sqSrc, sqDst));
            vls.push(MVV_LVA(pcDst, 2));
          }
        }
      }
      if (AWAY_HALF(sqSrc, this.sdPlayer)) {
        for (var delta = -1; delta <= 1; delta += 2) {
          sqDst = sqSrc + delta;
          if (IN_BOARD(sqDst)) {
            var pcDst = this.squares[sqDst];
            if((pcDst & PCNOMAX) == PIECE_DIAMOND){
              continue;
            }
            if (vls == null) {
              if ((pcDst & pcSelfSide) == 0) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            } else if ((pcDst & pcOppSide) != 0) {
              mvs.push(MOVE(sqSrc, sqDst));
              vls.push(MVV_LVA(pcDst, 2));
            }
          }
        }
      }
      break;
    case PIECE_SHIELD:
      //todo
      for (var i = 0; i < 4; i ++) {
        var delta = KING_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if (pcDst == 0) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else {
            break;
          }
          sqDst += delta;
        }
      }
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if(!IN_BOARD(sqDst)){
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if ((pcDst & pcOppSide) != 0) {
          if(this.shieldcanattack(sqSrc,-1,false)){
            mvs.push(MOVE(sqSrc, sqDst));
            if (vls != null) {
              vls.push(MVV_LVA(pcDst, 4));
            }
          }
        }
        else if(pcDst == 0){
          sqDst = sqSrc + 2*ADVISOR_DELTA[i];
          if(!IN_BOARD(sqDst)){
            continue;
          }
          pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            continue;
          }
          if ((pcDst & pcOppSide) != 0) {
            if(this.shieldcanattack(sqSrc,-1,false)){
              mvs.push(MOVE(sqSrc, sqDst));
              if (vls != null) {
                vls.push(MVV_LVA(pcDst, 4));
              }
            }
          }
        }
      }
      break;
    case PIECE_DRAGON:
      //巡河
      for(var delta = -1; delta <= 1; delta += 2){
        var sqDst = sqSrc + delta;
        if (((sqSrc > 0x70) && (sqSrc < 0x90)) && SAME_RANK(sqSrc, sqDst) && this.squares[sqDst] == 0){
          if(IN_BOARD(sqDst)){
            var pcDst = this.squares[sqDst];
            if (pcDst == 0) {
              if (vls == null) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            }
          }
        }
      }
      for (var i = 0; i < 4; i ++) {
        var delta = ADVISOR_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            break;
          }
          if(IN_DRAGONFORT(sqDst)){
            if(pcDst == 0){
              if (vls == null) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            }
            else if((pcDst & pcOppSide) != 0){
              mvs.push(MOVE(sqSrc, sqDst));
              if (vls != null) {
                vls.push(MVV_LVA(pcDst, 4));
              }
            }
            break;
          }
          else{
            if (pcDst == 0) {
              if (vls == null) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            } else {
              if ((pcDst & pcOppSide) != 0) {
                mvs.push(MOVE(sqSrc, sqDst));
                if (vls != null) {
                  vls.push(MVV_LVA(pcDst, 4));
                }
              }
              break;
            }
          }
          sqDst += delta;
        }
      }
      break;
    case PIECE_VANGUARD:
      var sqDst = SQUARE_FORWARD(sqSrc, this.sdPlayer);
      if (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) != PIECE_DIAMOND){
          if (vls == null) {
            if ((pcDst & pcSelfSide) == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else if ((pcDst & pcOppSide) != 0) {
            mvs.push(MOVE(sqSrc, sqDst));
            vls.push(MVV_LVA(pcDst, 2));
          }
        }

        if (pcDst == 0) {
          sqDst = SQUARE_FORWARD(sqDst, this.sdPlayer);
          if (IN_BOARD(sqDst)) {
            pcDst = this.squares[sqDst];
            if((pcDst & PCNOMAX) != PIECE_DIAMOND){
              if (vls == null) {
                if ((pcDst & pcSelfSide) == 0) {
                  mvs.push(MOVE(sqSrc, sqDst));
                }
              } else if ((pcDst & pcOppSide) != 0) {
                mvs.push(MOVE(sqSrc, sqDst));
                vls.push(MVV_LVA(pcDst, 2));
              }
            }
          }
        }
      }
      if (AWAY_HALF(sqSrc, this.sdPlayer)) {
        for (var delta = -1; delta <= 1; delta += 2) {
          sqDst = sqSrc + delta;
          if (IN_BOARD(sqDst)) {
            var pcDst = this.squares[sqDst];
            if((pcDst & PCNOMAX) == PIECE_DIAMOND){
              continue;
            }
            if (vls == null) {
              if ((pcDst & pcSelfSide) == 0) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            } else if ((pcDst & pcOppSide) != 0) {
              mvs.push(MOVE(sqSrc, sqDst));
              vls.push(MVV_LVA(pcDst, 2));
            }
          }
        }
      }
      break;
    case PIECE_SHADOW:
      for (var i = 0; i < 4; i++) {
        var sqDst = sqSrc + KING_DELTA[i];
        if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if ((pcDst & pcSelfSide) == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        } else if ((pcDst & pcOppSide) != 0) {
          mvs.push(MOVE(sqSrc, sqDst));
          vls.push(MVV_LVA(pcDst, 4));
        }
      }
      for (var i = 0; i < 256; i++){
        if(i == sqSrc)continue;
        if (IN_BOARD(i)){
          if ((this.squares[i] & pcSelfSide) != 0){
            var delta = (pcSelfSide == PCREDSIDE) ? 16 : -16;
            var sqDst = i+delta;
            if(IN_BOARD(sqDst)){
              var pcDst = this.squares[sqDst];
              if (pcDst == 0) {
                if (vls == null) {
                  mvs.push(MOVE(sqSrc, sqDst));
                }
              }
            }
          }
        }
      }
      break;
    case PIECE_PHANTOM:
      for (var i = 0; i < 4; i ++) {
        var delta = ADVISOR_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if(pcDst == 0){
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          }
          else {
            break;
          }
          sqDst += delta;
        }
      }
      for (var i = 0; i < 256; i++){
        if(i == sqSrc)continue;
        if (IN_BOARD(i)){
          if ((this.squares[i] & pcSelfSide) != 0){
            var sqDst = i;
            if(IN_BOARD(sqDst)){
              var pcDst = this.squares[sqDst];
              if (pcDst%PCNUM > PIECE_BISHOP) {
                if (vls == null) {
                  mvs.push(MOVE(sqSrc, sqDst));
                }
              }
            }
          }
        }
      }
      break;
    case PIECE_DIAMOND:
      /*for (var i = 0; i < 4; i++) {
        var sqDst = sqSrc + KING_DELTA[i];
        if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if (vls == null) {
          if (pcDst == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        }
        if(pcDst == 0){
          sqDst = sqSrc + 2*KING_DELTA[i];
          if (!IN_BOARD(sqDst)) {
            continue;
          }
          pcDst = this.squares[sqDst];
          if (vls == null) {
            if (pcDst == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          }
        }
      }*/
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + KING_DELTA[i];
        if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if (pcDst == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        }
      }
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if (pcDst == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        }
      }
      break;
    case PIECE_STEALTH:
      if(IN_BOARD(sqSrc)){
        for (var i = 0; i < 4; i++) {
          var sqDst = sqSrc + KING_DELTA[i];
          if (!IN_BOARD(sqDst)) {
            continue;
          }
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            continue;
          }
          if (vls == null) {
            if ((pcDst & pcSelfSide) == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else if ((pcDst & pcOppSide) != 0) {
            mvs.push(MOVE(sqSrc, sqDst));
            vls.push(MVV_LVA(pcDst, 4));
          }
        }
        for (var i = 16; i < 20; i++) {
          var sqDst = i;
          var pcDst = this.squares[sqDst];
          if(pcDst != 0){
            continue;
          }
          if (vls == null) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
        }
      }
      else{
        for (var i = 0; i < 256; i++){
          if(i == sqSrc)continue;
          if (IN_BOARD(i)){
            if (this.squares[i] == 0){
              var sqDst = i;
              if (vls == null) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            }
          }
        }
      }
      break;
    case PIECE_YING:
      for (var i = 0; i < 4; i++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if (IN_BOARD(sqDst)) {
          if (this.squares[sqDst] == 0) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          }
        }
        
        sqDst = sqSrc + KING_DELTA[i];
        if (this.squares[sqDst] > 0) {
          continue;
        } else if (this.squares[sqDst] == 0) {
          if (IN_BOARD(sqDst)) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          }
        }
        if (i == 0 || i == 3) continue;
        for (var j = 0; j < 2; j++) {
          sqDst = sqSrc + KNIGHT_DELTA[i][j];
          if (!IN_BOARD(sqDst)) {
            continue;
          }
          var pcDst = this.squares[sqDst];
          if ((pcDst & PCNOMAX) == PIECE_DIAMOND) {
            continue;
          }
          if (vls == null) {
            if ((pcDst & pcSelfSide) == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else if ((pcDst & pcOppSide) != 0) {
            mvs.push(MOVE(sqSrc, sqDst));
            vls.push(MVV_LVA(pcDst, 1));
          }
        }
      }
      break;
    case PIECE_YANG:
      for (var i = 0; i < 4; i++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if (IN_BOARD(sqDst)) {
          if (this.squares[sqDst] == 0) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          }
        }
        
        var sqDst = sqSrc + KING_DELTA[i];
        if (this.squares[sqDst] > 0) {
          continue;
        } else if (this.squares[sqDst] == 0) {
          if (IN_BOARD(sqDst)) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          }
        }
        if (i == 1 || i == 2) continue;
        for (var j = 0; j < 2; j++) {
          sqDst = sqSrc + KNIGHT_DELTA[i][j];
          if (!IN_BOARD(sqDst)) {
            continue;
          }
          var pcDst = this.squares[sqDst];
          if ((pcDst & PCNOMAX) == PIECE_DIAMOND) {
            continue;
          }
          if (vls == null) {
            if ((pcDst & pcSelfSide) == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else if ((pcDst & pcOppSide) != 0) {
            mvs.push(MOVE(sqSrc, sqDst));
            vls.push(MVV_LVA(pcDst, 1));
          }
        }
      }
      break;
    case PIECE_DEVIL:
      for (var i = 0; i < 8; i ++) {
        var delta = QUEEN_DELTA[i];
        var sqDst = sqSrc + delta;
        var mType = MTYPE_NORMAL;
        var mParam = 0;
        while (IN_BOARD(sqDst)) {
          mType = ((/*IN_MYFORT(this.sdPlayer, sqSrc) || */IN_MYFORT(this.sdPlayer, sqDst)) ? MTYPE_NORMAL : MTYPE_DEVIL);
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            break;
          }
          if (pcDst == 0) {
            if (vls == null) {
              if(mType == MTYPE_NORMAL){
                mvs.push(MOVE(sqSrc, sqDst));
              }
              else{
                for (var mp = 0; mp < 9; mp++) {
                  mParam = DEVIL_MPARAM[this.sdPlayer][mp];
                  if(mParam == sqSrc)continue;
                  var pcmp = this.squares[mParam];
                  if((pcmp & pcSelfSide) != 0 && (pcmp & PCNOMAX) != PIECE_KING){
                    mvs.push(MOVE(sqSrc, sqDst, mType, mParam));
                  }
                }
              }
            }
          } else {
            if ((pcDst & pcOppSide) != 0) {
              if(mType == MTYPE_NORMAL){
                mvs.push(MOVE(sqSrc, sqDst));
                if (vls != null) {
                  vls.push(MVV_LVA(pcDst, 4));
                }
              }
              else{
                for (var mp = 0; mp < 9; mp++) {
                  mParam = DEVIL_MPARAM[this.sdPlayer][mp];
                  if(mParam == sqSrc)continue;
                  var pcmp = this.squares[mParam];
                  if((pcmp & pcSelfSide) != 0 && (pcmp & PCNOMAX) != PIECE_KING){
                    mvs.push(MOVE(sqSrc, sqDst, mType, mParam));
                    if (vls != null) {
                      vls.push(MVV_LVA(pcDst, 4));
                    }
                  }
                }
              }
            }
            break;
          }
          sqDst += delta;
        }
      }
      break;
    case PIECE_ASSASSIN:
      var sqDst = 0;
      var bAround = false;
      var sq = 0; 
      for (var i = 0; i < 4; i ++) {
        for (var j = 0; j < 2; j ++) {
          sqDst = sqSrc + KNIGHT_DELTA[i][j];
          if (!IN_BOARD(sqDst)) {
            continue;
          }
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            continue;
          }
          if (vls == null) {
            if (pcDst == 0) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
            else if ((pcDst & pcOppSide) != 0){
              bAround = false;
              sq = 0; 
              for (var k = 0; k < 4; k++) {
                sq = sqDst + KING_DELTA[k];
                if (IN_BOARD(sq)) {
                  if ((this.squares[sq] & pcOppSide) != 0) {
                    bAround = true;
                    break;
                  }
                }
              }
              if(!bAround){
                mvs.push(MOVE(sqSrc, sqDst));
              }
            }
          }
          else if ((pcDst & pcOppSide) != 0) {
            bAround = false;
            sq = 0; 
            for (var k = 0; k < 4; k++) {
              sq = sqDst + KING_DELTA[k];
              if (IN_BOARD(sq)) {
                if ((this.squares[sq] & pcOppSide) != 0) {
                  bAround = true;
                  break;
                }
              }
            }
            if(!bAround){
              mvs.push(MOVE(sqSrc, sqDst));
              vls.push(MVV_LVA(pcDst, 1));
            }
          }
        }
      }
      break;
    case PIECE_BREAKTHROUGH:
      for (var i = 0; i < 4; i ++) {
        var delta = ADVISOR_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if (pcDst == 0) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          } else {
            for (var j = 0; j < 4; j ++) {
              var sq = sqDst + KING_DELTA[j];
              if (IN_BOARD(sq)) {
                pcDst = this.squares[sq];
                if((pcDst & PCNOMAX) == PIECE_DIAMOND){
                  continue;
                }
                if (vls == null) {
                  if ((pcDst & pcSelfSide) == 0) {
                    mvs.push(MOVE(sqSrc, sq));
                  }
                }
                else if ((pcDst & pcOppSide) != 0) {
                  mvs.push(MOVE(sqSrc, sq));
                  vls.push(MVV_LVA(pcDst, 4));
                }
              }
            }
            break;
          }
          sqDst += delta;
        }
      }
      break;
    case PIECE_DEMON:
      for (var i = 0; i < 8; i ++) {
        var delta = QUEEN_DELTA[i];
        var sqDst = sqSrc + delta;
        var mType = MTYPE_NORMAL;
        var mParam = 0;
        for(var j = 0; j < 2; j++){
          if(!IN_BOARD(sqDst))break;
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            break;
          }
          if (pcDst == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          } else {
            if ((pcDst & pcOppSide) != 0){
              if(i < 4 && j < 1){
                mvs.push(MOVE(sqSrc, sqDst));
                if (vls != null) {
                  vls.push(MVV_LVA(pcDst, 4));
                }
              }
            }
            else if((pcDst & pcSelfSide) != 0 && (pcDst & PCNOMAX) != PIECE_KING){
              mType = MTYPE_DEMON;
              for (var k = 0; k < 8; k ++) {
                mParam = sqDst;
                var dt2 = QUEEN_DELTA[k];
                var sqD2 = sqDst + dt2;
                for(var L = 0; L < 2; L++){
                  if(!IN_BOARD(sqD2))break;
                  if(sqD2 == sqSrc){
                    sqD2 += dt2;
                    continue;
                  }
                  var pa =  this.squares[sqD2];
                  if((pa & PCNOMAX) == PIECE_DIAMOND){
                    break;
                  }
                  if(pa == 0){
                    mvs.push(MOVE(sqSrc, sqD2, mType, mParam));
                  }
                  else{
                    if ((pa & pcOppSide) != 0){
                      mvs.push(MOVE(sqSrc, sqD2, mType, mParam));
                      if (vls != null) {
                        vls.push(MVV_LVA(pa, 4));
                      }
                    }
                    break;
                  }
                  sqD2 += dt2;
                }
              }
            }
            break;
          }
          sqDst += delta;
        }
      }
      break;
    //
    case PIECE_DIAGONALLY1:
    case PIECE_DIAGONALLY2:
    case PIECE_DIAGONALLY3:
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if(pcDst == 0){
            mvs.push(MOVE(sqSrc, sqDst));
          }
          else if ((pcDst & pcSelfSide) != 0 && (pcDst & PCNOMAX) >= PIECE_KNIGHT && (pcDst & PCNOMAX) <= PIECE_PAWN) {
            mvs.push(MOVE(sqSrc, sqDst, MTYPE_ATTACH, 0));
          }
        }
      }
      break;
    case PIECE_WORM:
      for (var i = 0; i < 4; i++) {
        var sqDst = sqSrc + KING_DELTA[i];
        if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (vls == null) {
          if ((pcDst & pcSelfSide) == 0) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
          if (pcDst == 0 && this.wormCounter[this.sdPlayer] < 3) {
            mvs.push(MOVE(sqSrc, sqDst, MTYPE_WORM, 0));
          }
        } else if ((pcDst & pcOppSide) != 0) {
          mvs.push(MOVE(sqSrc, sqDst));
          vls.push(MVV_LVA(pcDst, 4));
        }
      }
      break;
    //
    case PIECE_NINJAR:
    case PIECE_NINJAV:
      for (var i = 0; i < 4; i ++) {
        var sqDst = sqSrc + ADVISOR_DELTA[i];
        if (!IN_BOARD(sqDst)) {
          continue;
        }
        var pcDst = this.squares[sqDst];
        if((pcDst & PCNOMAX) == PIECE_DIAMOND){
          continue;
        }
        if (pcDst == 0) {
          if (vls == null) {
            mvs.push(MOVE(sqSrc, sqDst));
          }
          if ((pcSrc - pcSelfSide) == PIECE_NINJAR) {
            var sqDst = sqSrc + 2 * ADVISOR_DELTA[i];
            if (!IN_BOARD(sqDst)) {
              continue;
            }
            var pcDst = this.squares[sqDst];
            if((pcDst & PCNOMAX) == PIECE_DIAMOND){
              continue;
            }
            if (vls == null) {
              if (pcDst == 0) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            }
            else if ((pcDst & pcOppSide) != 0) {
              mvs.push(MOVE(sqSrc, sqDst));
              vls.push(MVV_LVA(pcDst, 4));
            }
          }
        }
      }
      if (vls == null) {
        if ((pcSrc - pcSelfSide) == PIECE_NINJAR || 2 * this.pieceCounter[this.sdPlayer][PIECE_NINJAR] + this.pieceCounter[this.sdPlayer][PIECE_NINJAV] < this.ninjaMaxNum[this.sdPlayer]) {
          for (var i = 0; i < 256; i++){
            if (IN_BOARD(i)){
              if (this.squares[i] == 0){
                mvs.push(MOVE(sqSrc, i, (pcSrc - pcSelfSide) == PIECE_NINJAR ? MTYPE_NINJAR2V : MTYPE_NINJAV2V, 0));
              }
            }
          }
        }
        if ((pcSrc - pcSelfSide) == PIECE_NINJAV) {
          for (var i = 0; i < 256; i++){
            if (i == sqSrc) continue;
            if (IN_BOARD(i)) {
              if (this.squares[i] == pcSelfSide + PIECE_NINJAV) {
                mvs.push(MOVE(sqSrc, i, MTYPE_NINJAV2R, 0));
              }
            }
          }
        }
      }
      break;
    //
    case PIECE_THUNDER:
      for (var i = 0; i < 4; i ++) {
        var delta = KING_DELTA[i];
        var sqDst = sqSrc + delta;
        var step = 1;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            sqDst += delta;
            step++;
            continue;
          }
          if (step == 1) {
            if (pcDst == 0) {
              if (vls == null) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            }
            else {
              if ((pcDst & pcOppSide) != 0) {
                mvs.push(MOVE(sqSrc, sqDst));
                if (vls != null) {
                  vls.push(MVV_LVA(pcDst, 4));
                }
              }
              break;
            }
          }
          else {
            if (pcDst == 0) {
              if (vls == null) {
                mvs.push(MOVE(sqSrc, sqDst));
              }
            }
          }
          sqDst += delta;
          step++;
        }
      }
      break;
    //
    case PIECE_WIND:
      var sqWind = [[0, 0], [0, 0], [0, 0], [0, 0]];
      for (var i = 0; i < 4; i ++) {
        var delta = KING_DELTA[i];
        var sqDst = sqSrc + delta;
        sqWind[i, 0] = (IN_BOARD(sqDst) && this.squares[sqDst] == 0) ? 1 : 0;
        sqWind[i, 1] = sqDst;
      }
      for (var i = 0; i < 4; i ++) {
        var delta = KING_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if((pcDst & PCNOMAX) == PIECE_DIAMOND){
            sqDst += delta;
            continue;
          }
          if (pcDst == 0) {
            if (vls == null) {
              mvs.push(MOVE(sqSrc, sqDst));
            }
          }
          else if ((pcDst & pcSelfSide) != 0 && (pcDst & PCNOMAX) > PIECE_BISHOP) {
            if (vls == null) {
              for (var j = 0; j < 4; j ++) {
                if (sqWind[j, 0] != 0) {
                  mvs.push(MOVE(sqSrc, sqDst, MTYPE_WIND, sqWind[j, 1]));
                }
              }
            }
          }
          sqDst += delta;
        }
      }
      break;
    }
    
    if(this.bwizard4generate){
      this.bwizard4generate = false;
      this.squares[sqSrc] = oldpcSrc;
    }
  }
  return mvs;
}

Position.prototype.legalMove = function(mv) {
  var mType = MTYPE(mv);
  var mParam = MPARAM(mv);
  var sqSrc = SRC(mv);
  var pcSrc = this.squares[sqSrc];
  var pkSrc = this.pksquares[sqSrc];
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  if(mType == MTYPE_DEVIL && (pcSrc & PCNOMAX) != PIECE_DEVIL){
    return false;
  }
  if(mType == MTYPE_DEMON && (pcSrc & PCNOMAX) != PIECE_DEMON){
    return false;
  }
  if(mType == MTYPE_ATTACH && ((pcSrc & PCNOMAX) != PIECE_DIAGONALLY1 && (pcSrc & PCNOMAX) != PIECE_DIAGONALLY2 && (pcSrc & PCNOMAX) != PIECE_DIAGONALLY3)){
    return false;
  }
  if(mType == MTYPE_PLUSMOVE_SWAP && (pkSrc & PCNOMAX) != PLUSKIND_SWAPADVISOR){
    return false;
  }
  if(mType == MTYPE_WORM && (pcSrc & PCNOMAX) != PIECE_WORM){
    return false;
  }
  if(mType == MTYPE_NINJAR2V && (pcSrc & PCNOMAX) != PIECE_NINJAR) {
    return false;
  }
  if(mType == MTYPE_NINJAV2V && (pcSrc & PCNOMAX) != PIECE_NINJAV) {
    return false;
  }
  if(mType == MTYPE_NINJAV2R && (pcSrc & PCNOMAX) != PIECE_NINJAV){
    return false;
  }
  if(mType == MTYPE_WIND && (pcSrc & PCNOMAX) != PIECE_WIND){
    return false;
  }
  return this.legalMove4pc(mv) || this.legalMove4pk(mv);
}

Position.prototype.legalMove4pc = function(mv) {
  var mType = MTYPE(mv);
  var mParam = MPARAM(mv);
  var sqSrc = SRC(mv);
  var pcSrc = this.squares[sqSrc];
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  /*if(mType == MTYPE_DEVIL && (pcSrc & PCNOMAX) != PIECE_DEVIL){
    return false;
  }
  if(mType == MTYPE_DEMON && (pcSrc & PCNOMAX) != PIECE_DEMON){
    return false;
  }
  if(mType == MTYPE_ATTACH && ((pcSrc & PCNOMAX) != PIECE_DIAGONALLY1 && (pcSrc & PCNOMAX) != PIECE_DIAGONALLY2)){
    return false;
  }*/
  if ((pcSrc & pcSelfSide) == 0) {
    return false;
  }
  
  if(!this.bwizard4legal){
    this.bwizard4legal = (pcSrc & PCNOMAX) == PIECE_WIZARD;
    if(this.bwizard4legal){
      this.sqwizard4legal = sqSrc;
      this.squares[sqSrc] = pcSelfSide+WIZARDPIECE[this.lastmovepc[1-this.sdPlayer]];
      var blegal = this.legalMove4pc(mv);
      this.squares[sqSrc] = pcSrc;
      this.bwizard4legal = false;
      return blegal;
    }
  }

  var sqDst = DST(mv);
  var pcDst = this.squares[sqDst];
  var sqDg = 0;
  if(sqDst < 0x10){
    //出龙走法
    sqDg = DG(sqSrc,sqDst);
    pcDst = this.squares[sqDg];
  }
  var pcOppSide = OPP_SIDE_TAG(this.sdPlayer);
  if((pcDst & PCNOMAX) == PIECE_DIAMOND){
    return false;
  }
  if ((pcDst & pcSelfSide) != 0) {
    if (!((pcSrc & PCNOMAX) == PIECE_PHANTOM && (pcDst & PCNOMAX) > PIECE_BISHOP) && mType != MTYPE_ATTACH && mType != MTYPE_NINJAV2R && mType != MTYPE_WIND){
      return false;
    }
  }

  switch (pcSrc - pcSelfSide) {
  case PIECE_KING:
    if(sqDg == 0){
      return (this.bwizard4legal ? IN_BOARD(sqDst) : IN_FORT(sqDst)) && KING_SPAN(sqSrc, sqDst);
    }
    else{
      return this.bDragon(this.sdPlayer) && (this.bwizard4legal ? false : IN_FORT(sqDg)) && KING_SPAN(sqSrc, sqDg);
    }
  case PIECE_ADVISOR:
    return (this.bwizard4legal ? IN_BOARD(sqDst) : IN_FORT(sqDst)) && ADVISOR_SPAN(sqSrc, sqDst);
  case PIECE_BISHOP:
    return (this.bwizard4legal ? IN_BOARD(sqDst) : SAME_HALF(sqSrc, sqDst)) && BISHOP_SPAN(sqSrc, sqDst) && this.squares[BISHOP_PIN(sqSrc, sqDst)] == 0;
  case PIECE_KNIGHT:
    var sqPin = KNIGHT_PIN(sqSrc, sqDst);
    return sqPin != sqSrc && this.squares[sqPin] == 0;
  case PIECE_ROOK:
  case PIECE_CANNON:
    var delta;
    if (SAME_RANK(sqSrc, sqDst)) {
      delta = (sqDst < sqSrc ? -1 : 1);
    } else if (SAME_FILE(sqSrc, sqDst)) {
      delta = (sqDst < sqSrc ? -16 : 16);
    } else {
      return false;
    }
    var sqPin = sqSrc + delta;
    while (sqPin != sqDst && this.squares[sqPin] == 0) {
      sqPin += delta;
    }
    if (sqPin == sqDst) {
      return pcDst == 0 || pcSrc - pcSelfSide == PIECE_ROOK;
    }
    if (pcDst == 0 || pcSrc - pcSelfSide != PIECE_CANNON) {
      return false;
    }
    sqPin += delta;
    while (sqPin != sqDst && this.squares[sqPin] == 0) {
      sqPin += delta;
    }
    return sqPin == sqDst;
  case PIECE_PAWN:
    if (AWAY_HALF(sqDst, this.sdPlayer) && (sqDst == sqSrc - 1 || sqDst == sqSrc + 1)) {
      return true;
    }
    return sqDst == SQUARE_FORWARD(sqSrc, this.sdPlayer);
  case PIECE_SHIELD:
    //todo
    var delta;
    if (SAME_RANK(sqSrc, sqDst)) {
      delta = (sqDst < sqSrc ? -1 : 1);
    } else if (SAME_FILE(sqSrc, sqDst)) {
      delta = (sqDst < sqSrc ? -16 : 16);
    } else if((pcDst & pcOppSide) != 0){
      if(ADVISOR_SPAN(sqSrc, sqDst) || (BISHOP_SPAN(sqSrc, sqDst) && (this.squares[BISHOP_PIN(sqSrc, sqDst)] == 0))){
        if(this.shieldcanattack(sqSrc,-1,false)){
          return true;
        }
        else {
          return false;
        }
      }
    } else{
      return false;
    }
    var sqPin = sqSrc + delta;
    while (sqPin != sqDst && this.squares[sqPin] == 0) {
      sqPin += delta;
    }
    if (sqPin == sqDst) {
      return pcDst == 0;
    }
    else {
      return false;
    }
  case PIECE_DRAGON:
    if(!IN_BOARD(sqSrc))return false;
    var delta;
    if ((sqDst-sqSrc)%15 == 0) {
      delta = (sqDst < sqSrc ? -15 : 15);
    } else if ((sqDst-sqSrc)%17 == 0) {
      delta = (sqDst < sqSrc ? -17 : 17);
    } else if (((sqSrc > 0x70) && (sqSrc < 0x90)) && SAME_RANK(sqSrc, sqDst) && this.squares[sqDst] == 0){
      //巡河
      if(Math.abs(sqDst-sqSrc) == 1){
        return true;
      }
    } else {
      return false;
    }
    var sqPin = sqSrc + delta;
    while (sqPin != sqDst && this.squares[sqPin] == 0 && !IN_DRAGONFORT(sqPin)) {
      sqPin += delta;
    }
    if (sqPin == sqDst) {
      return true;
    }
    else {
      return false;
    }
  case PIECE_VANGUARD:
    if (AWAY_HALF(sqDst, this.sdPlayer) && (sqDst == sqSrc - 1 || sqDst == sqSrc + 1)) {
      return true;
    }
    var sqfw = SQUARE_FORWARD(sqSrc, this.sdPlayer);
      return (sqDst == sqfw) || (this.squares[sqfw] == 0 && sqDst == SQUARE_FORWARD(sqfw, this.sdPlayer));
  case PIECE_SHADOW:
    var delta = (pcSelfSide == PCREDSIDE) ? 16 : -16;
    return (pcDst == 0 && sqDst - delta != sqSrc && (this.squares[sqDst - delta] & pcSelfSide) != 0) || KING_SPAN(sqSrc, sqDst);
  case PIECE_PHANTOM:
    if ((pcDst & pcSelfSide) != 0){
      if (pcDst%PCNUM > PIECE_BISHOP){
        return true;
      }
    }
    if((pcDst & pcOppSide) != 0){
      return false;
    }
    var delta;
    if ((sqDst-sqSrc)%15 == 0) {
      delta = (sqDst < sqSrc ? -15 : 15);
    } else if ((sqDst-sqSrc)%17 == 0) {
      delta = (sqDst < sqSrc ? -17 : 17);
    } else{
      return false;
    }
    var sqPin = sqSrc + delta;
    while (sqPin != sqDst && this.squares[sqPin] == 0) {
      sqPin += delta;
    }
    if (sqPin == sqDst) {
      return true;
    }
    else {
      return false;
    }
  case PIECE_DIAMOND:
    if(pcDst != 0){
      return false;
    }
    return KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst);
  case PIECE_STEALTH:
    return (IN_BOARD(sqSrc) && sqDst >= 16 && sqDst < 20 && pcDst == 0) || (IN_BOARD(sqDst) && sqSrc >= 16 && sqSrc < 20 && pcDst == 0) || KING_SPAN(sqSrc, sqDst);
  case PIECE_YING:
    var sqPin = KNIGHT_PIN(sqSrc, sqDst);
    return ((KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst)) && pcDst == 0) || (sqPin != sqSrc && sqPin != (sqSrc - 16) && sqPin != (sqSrc + 16) && this.squares[sqPin] == 0);
  case PIECE_YANG:
    var sqPin = KNIGHT_PIN(sqSrc, sqDst);
    return ((KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst)) && pcDst == 0) || (sqPin != sqSrc && sqPin != (sqSrc - 1) && sqPin != (sqSrc + 1) && this.squares[sqPin] == 0);
  case PIECE_DEVIL:
    if(mType != ((/*IN_MYFORT(this.sdPlayer, sqSrc) || */IN_MYFORT(this.sdPlayer, sqDst)) ? MTYPE_NORMAL : MTYPE_DEVIL)){
      return false;
    }
    if(mType == MTYPE_DEVIL && !(IN_MYFORT(this.sdPlayer, mParam) && (this.squares[mParam] & pcSelfSide) != 0 && (this.squares[mParam] & PCNOMAX) != PIECE_KING)){
      return false;
    }
    var delta;
    if (SAME_RANK(sqSrc, sqDst)) {
      delta = (sqDst < sqSrc ? -1 : 1);
    } else if (SAME_FILE(sqSrc, sqDst)) {
      delta = (sqDst < sqSrc ? -16 : 16);
    }
    else if ((sqDst-sqSrc)%15 == 0) {
      delta = (sqDst < sqSrc ? -15 : 15);
    } else if ((sqDst-sqSrc)%17 == 0) {
      delta = (sqDst < sqSrc ? -17 : 17);
    } else {
      return false;
    }
    var sqPin = sqSrc + delta;
    while (sqPin != sqDst && this.squares[sqPin] == 0) {
      sqPin += delta;
    }
    if (sqPin == sqDst) {
      return true;
    }
    else{
      return false;
    }
  case PIECE_ASSASSIN: {
    var bAround = false;
    var sq = 0; 
    var sqPin = KNIGHT_PIN(sqSrc, sqDst);
    if (sqPin != sqSrc) {
      if (pcDst == 0) return true;
      else {
        for (var k = 0; k < 4; k++){
          sq = sqDst + KING_DELTA[k];
          if (IN_BOARD(sq)) {
            if ((this.squares[sq] & pcOppSide) != 0) {
              bAround = true;
              break;
            }
          }
        }
        return !bAround;
      }
    }
    else {
      return false;
    }
  }
  case PIECE_BREAKTHROUGH:
    for (var i = 0; i < 4; i++) {
      if (sqDst == sqSrc + KING_DELTA[i]) {
        return (this.squares[sqSrc + BREAKTHROUGH_DELTA[i][0]] != 0 || this.squares[sqSrc + BREAKTHROUGH_DELTA[i][1]] != 0);
      }
    }
    var delta = 0;
    var dsq = sqDst - sqSrc;
    if ((sqDst & 0xf) > (sqSrc & 0xf)) {
      if (dsq <= -14) {
        delta = -15;
      } else if (dsq >= 14) {
        delta = 17;
      } else {
        return false;
      }
    } else if ((sqDst & 0xf) < (sqSrc & 0xf)) {
      if (dsq <= -14) {
        delta = -17;
      } else if (dsq >= 14) {
        delta = 15;
      } else {
        return false;
      }
    } else {
      return false;
    }
    var sqPin = sqSrc + delta;
    while (sqPin != sqDst && this.squares[sqPin] == 0) {
      sqPin += delta;
    }
    if (sqPin == sqDst) {
      return (pcDst == 0);
    }
    else {
      for (var i = 0; i < 4; i++) {
        if (sqDst == sqPin + KING_DELTA[i]) {
          return true;
        }
      }
      return false;
    }
  case PIECE_DEMON:
    if(mType == MTYPE_NORMAL){
      if((pcDst & pcOppSide) != 0){
        return KING_SPAN(sqSrc, sqDst);
      }
      else{
        if(pcDst != 0)return false;
        return KING_SPAN(sqSrc, sqDst) || ADVISOR_SPAN(sqSrc, sqDst) || (DEMON_SPAN(sqSrc, sqDst) && this.squares[DEMON_PIN(sqSrc, sqDst)] == 0);
      }
    }
    else if(mType == MTYPE_DEMON){
      var bFlag = false;
      var pa = this.squares[mParam];
      if((pa & pcSelfSide) != 0 && (pa & PCNOMAX) != PIECE_DIAMOND && (pa & PCNOMAX) != PIECE_KING && (pcDst & PCNOMAX) != PIECE_DIAMOND){
        if(KING_SPAN(sqSrc, mParam) || ADVISOR_SPAN(sqSrc, mParam) || (DEMON_SPAN(sqSrc, mParam) && this.squares[DEMON_PIN(sqSrc, mParam)] == 0)){
          var oldpcSrc = pcSrc;
          this.squares[sqSrc] = 0;
          if(KING_SPAN(mParam, sqDst) || ADVISOR_SPAN(mParam, sqDst) || (DEMON_SPAN(mParam, sqDst) && this.squares[DEMON_PIN(mParam, sqDst)] == 0)){
            bFlag = true;
          }
          this.squares[sqSrc] = oldpcSrc;
        }
      }
      return bFlag;
    }
    return false;
  //
  case PIECE_DIAGONALLY1:
  case PIECE_DIAGONALLY2:
  case PIECE_DIAGONALLY3:
    if(IN_BOARD(sqDst) && ADVISOR_SPAN(sqSrc, sqDst)){
      if(mType == MTYPE_NORMAL){
        if(pcDst != 0){
          return false;
        }
        else{
          return true;
        }
      }
      else if(mType == MTYPE_ATTACH){
        return ((pcDst & pcSelfSide) != 0 && (pcDst & PCNOMAX) >= PIECE_KNIGHT && (pcDst & PCNOMAX) <= PIECE_PAWN);
      }
    }
    else{
      return false;
    }
  case PIECE_WORM:
    if (mType == MTYPE_NORMAL) {
      return KING_SPAN(sqSrc, sqDst);
    }
    else if (mType == MTYPE_WORM) {
      return pcDst == 0 && this.wormCounter[this.sdPlayer] < 3 && KING_SPAN(sqSrc, sqDst);
    }
    return false;
  case PIECE_NINJAR:
    if (mType == MTYPE_NORMAL) {
      return IN_BOARD(sqDst) && ((pcDst == 0 && ADVISOR_SPAN(sqSrc, sqDst)) || (BISHOP_SPAN(sqSrc, sqDst) && this.squares[BISHOP_PIN(sqSrc, sqDst)] == 0));
    }
    else if (mType == MTYPE_NINJAR2V) {
      return IN_BOARD(sqDst) && pcDst == 0;
    }
    return false;
  case PIECE_NINJAV:
    if (mType == MTYPE_NORMAL) {
      return IN_BOARD(sqDst) && pcDst == 0 && ADVISOR_SPAN(sqSrc, sqDst);
    }
    else if (mType == MTYPE_NINJAV2V) {
      return IN_BOARD(sqDst) && pcDst == 0 && (2 * this.pieceCounter[this.sdPlayer][PIECE_NINJAR] + this.pieceCounter[this.sdPlayer][PIECE_NINJAV] < this.ninjaMaxNum[this.sdPlayer]);
    }
    else if (mType == MTYPE_NINJAV2R) {
      return IN_BOARD(sqDst) && pcDst == pcSelfSide + PIECE_NINJAV;
    }
    return false;
  case PIECE_THUNDER:
    return (pcDst == 0 && (SAME_FILE(sqSrc, sqDst) || SAME_RANK(sqSrc, sqDst))) || KING_SPAN(sqSrc, sqDst);
  case PIECE_WIND:
    if (mType == MTYPE_NORMAL) {
      return (pcDst == 0 && (SAME_FILE(sqSrc, sqDst) || SAME_RANK(sqSrc, sqDst)));
    }
    else if (mType == MTYPE_WIND) {
      return ((pcDst & pcSelfSide) != 0 && (pcDst & PCNOMAX) > PIECE_BISHOP && (SAME_FILE(sqSrc, sqDst) || SAME_RANK(sqSrc, sqDst))) && KING_SPAN(sqSrc, mParam) && this.squares[mParam] == 0;
    }
  default:
    return false;
  }
}

Position.prototype.legalMove4pk = function(mv) {
  var mType = MTYPE(mv);
  var mParam = MPARAM(mv);
  var sqSrc = SRC(mv);
  var pcSrc = this.squares[sqSrc];
  var pkSrc = this.pksquares[sqSrc];
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  if ((pcSrc & pcSelfSide) == 0) {
    return false;
  }

  var sqDst = DST(mv);
  var pcDst = this.squares[sqDst];
  var pcOppSide = OPP_SIDE_TAG(this.sdPlayer);
  if ((pcDst & pcSelfSide) != 0) {
    if ((pkSrc & PCNOMAX) != PLUSKIND_SWAPADVISOR){
      return false;
    }
  }

  if(pkSrc != 0){
    switch (pkSrc - pcSelfSide){
      case PLUSKIND_NULL:
        return false;
      case PLUSKIND_ADVISOR:
        return IN_BOARD(sqDst) && ADVISOR_SPAN(sqSrc, sqDst);
      case PLUSKIND_SWAPADVISOR:
        if(mType == MTYPE_NORMAL){
          return pcDst == 0 && IN_BOARD(sqDst) && ADVISOR_SPAN(sqSrc, sqDst);
        }
        else if (mType == MTYPE_PLUSMOVE_SWAP) {
          if ((pcDst & pcSelfSide) == 0 || (pcDst & PCNOMAX) <= PIECE_BISHOP) return false;
          return IN_BOARD(sqDst) && ADVISOR_SPAN(sqSrc, sqDst);
        }
      case PLUSKIND_SPEEDADVISOR:
        if (pcDst == 0 && IN_BOARD(sqDst)){
          if(ADVISOR_SPAN(sqSrc, sqDst) || (BISHOP_SPAN(sqSrc, sqDst) && (this.squares[BISHOP_PIN(sqSrc, sqDst)] == 0))){
            return true;
          }
        }
        return false;
      default:
        return false;
    }
  }

}

Position.prototype.checked = function() {
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  var pcOppSide = OPP_SIDE_TAG(this.sdPlayer);
  
  if(!this.bwizard4checked){
    var wpc = WIZARDPIECE[this.lastmovepc[this.sdPlayer]];
    this.bwizard4checked = WIZARDPIECE[wpc] != PIECE_WIZARD;
    if(this.bwizard4checked){
      this.pushPC(pcOppSide+PIECE_WIZARD,(wpc == PIECE_KING ? pcOppSide+PIECE_SHADOW:pcOppSide+wpc));
      var bchecked = this.checked();
      this.popPC();
      this.bwizard4checked = false;
      return bchecked;
    }
  }

  this.sqCheck.fill(0);
  for (var sqSrc = 0; sqSrc < 256; sqSrc ++) {
    if (this.squares[sqSrc] != pcSelfSide + PIECE_KING) {
      continue;
    }
    for (var i = 0; i < 4; i ++) {
      var sq = sqSrc + KING_DELTA[i];
      if(IN_BOARD(sq)){
        if(this.squares[sq] > 0)this.sqCheck[sq] = 1;
      }
    }
    break;
  }
  for (var sqSrc = 0; sqSrc < 256; sqSrc ++) {
    if(this.sqCheck[sqSrc] == 1){
      for (var i = 0; i < 4; i ++) {
        var delta = ADVISOR_DELTA[i];
        var sqDst = sqSrc + delta;
        while (IN_BOARD(sqDst)) {
          var pcDst = this.squares[sqDst];
          if (pcDst > 0) {
            if (pcDst == pcOppSide + PIECE_BREAKTHROUGH) {
              return true;
            }
            break;
          }
          sqDst += delta;
        }
      }
    }
    if (this.squares[sqSrc] != pcSelfSide + PIECE_KING) {
      continue;
    }
    if(this.bwizard4checked){
      for (var i = 0; i < 4; i ++) {
        var pcDst = this.squares[sqSrc+ADVISOR_DELTA[i]];
        if(pcDst == pcOppSide+PIECE_ADVISOR){
          return true;
        }
        else if(pcDst == 0){
          pcDst = this.squares[sqSrc+2*ADVISOR_DELTA[i]];
          if(pcDst == pcOppSide+PIECE_BISHOP){
            return true;
          }
        }
      }
    }
    for (var i = 0; i < 4; i ++) {
      var pkDst = this.pksquares[sqSrc+ADVISOR_DELTA[i]];
      if(pkDst == pcOppSide + PLUSKIND_ADVISOR){
        return true;
      }
    }
    if (this.squares[SQUARE_FORWARD(sqSrc, this.sdPlayer)] == pcOppSide + PIECE_PAWN) {
      return true;
    }
    for (var delta = -1; delta <= 1; delta += 2) {
      if (this.squares[sqSrc + delta] == pcOppSide + PIECE_PAWN) {
        return true;
      }
    }
    var sqfw = SQUARE_FORWARD(sqSrc, this.sdPlayer);
    if (this.squares[sqfw] == pcOppSide + PIECE_VANGUARD) {
      return true;
    }
    if (this.squares[sqfw] == 0){
      if (this.squares[SQUARE_FORWARD(sqfw, this.sdPlayer)] == pcOppSide + PIECE_VANGUARD) {
        return true;
      }
    }
    for (var delta = -1; delta <= 1; delta += 2) {
      if (this.squares[sqSrc + delta] == pcOppSide + PIECE_VANGUARD) {
        return true;
      }
    }
    for (var delta = -1; delta <= 1; delta += 2) {
      if ((this.squares[sqSrc + delta] == pcOppSide + PIECE_SHADOW) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_STEALTH) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_DEMON) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_WORM) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_THUNDER)) {
        return true;
      }
    }
    for (var delta = -16; delta <= 16; delta += 32) {
      if ((this.squares[sqSrc + delta] == pcOppSide + PIECE_SHADOW) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_STEALTH) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_DEMON) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_WORM) || (this.squares[sqSrc + delta] == pcOppSide + PIECE_THUNDER)) {
        return true;
      }
    }
    var bAround = false;
    for (var i = 0; i < 4; i ++) {
      if ((this.squares[sqSrc + KING_DELTA[i]] & pcSelfSide) != 0) {
        bAround = true;
        break;
      }
    }
    if (!bAround) {
      for (var i = 0; i < 4; i ++) {
        for (var j = 0; j < 2; j ++) {
          var pcDst = this.squares[sqSrc + KNIGHT_DELTA[i][j]];
          if (pcDst == pcOppSide + PIECE_ASSASSIN) {
            return true;
          }
        }
      }
    }
    for (var i = 0; i < 4; i ++) {
      if (this.squares[sqSrc + ADVISOR_DELTA[i]] != 0) {
        continue;
      }
      for (var j = 0; j < 2; j ++) {
        var pcDst = this.squares[sqSrc + KNIGHT_CHECK_DELTA[i][j]];
        if (pcDst == pcOppSide + PIECE_KNIGHT) {
          return true;
        }
        if (i <= 1) {
          if (pcDst == pcOppSide + (j == 1 ? PIECE_YING : PIECE_YANG)) {
              return true;
            }
          }
        if (i >= 2) {
          if (pcDst == pcOppSide + (j == 0 ? PIECE_YING : PIECE_YANG)) {
            return true;
          }
        }
      }
    }
    for (var i = 0; i < 4; i ++) {
      var delta = KING_DELTA[i];
      var sqDst = sqSrc + delta;
      while (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if (pcDst > 0) {
          if (pcDst == pcOppSide + PIECE_ROOK || pcDst == pcOppSide + PIECE_KING) {
            return true;
          }
          break;
        }
        sqDst += delta;
      }
      sqDst += delta;
      while (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if (pcDst > 0) {
          if (pcDst == pcOppSide + PIECE_CANNON) {
            return true;
          }
          break;
        }
        sqDst += delta;
      }
    }
    //todo
    for (var i = 0; i < 4; i ++) {
      var sqDst = sqSrc + ADVISOR_DELTA[i];
      var pcDst = this.squares[sqDst];
      if(pcDst == pcOppSide + PIECE_SHIELD){
        if(this.shieldcanattack(sqDst,-1,true)){
          return true;
        }
      }
      else if(pcDst == 0){
        sqDst = sqSrc + 2*ADVISOR_DELTA[i];
        pcDst = this.squares[sqDst];
        if(pcDst == pcOppSide + PIECE_SHIELD){
          if(this.shieldcanattack(sqDst,-1,true)){
            return true;
          }
        }
        else if (pcDst == pcOppSide + PIECE_NINJAR) {
          return true;
        }
      }
    }
    //todo
    for (var i = 0; i < 4; i ++) {
      var delta = ADVISOR_DELTA[i];
      var sqDst = sqSrc + delta;
      while (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if (pcDst > 0) {
          if (pcDst == pcOppSide + PIECE_DRAGON) {
            return true;
          }
          break;
        }
        if(IN_DRAGONFORT(sqDst)){
          break;
        }
        sqDst += delta;
      }
    }
    for (var i = 0; i < 8; i ++) {
      var delta = QUEEN_DELTA[i];
      var sqDst = sqSrc + delta;
      while (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if (pcDst > 0) {
          if (pcDst == pcOppSide + PIECE_DEVIL) {
            /*if(IN_FLIPFORT(this.sdPlayer, sqDst)){
              return true;
            }
            else{
              for (var mp = 0; mp < 9; mp ++) {
                var mParam = DEVIL_MPARAM[1 - this.sdPlayer][mp];
                var pcmp = this.squares[mParam];
                if((pcmp & pcOppSide) != 0 && (pcmp & PCNOMAX) != PIECE_KING){
                  return true;
                }
              }
            }*/
              for (var mp = 0; mp < 9; mp ++) {
                var mParam = DEVIL_MPARAM[1 - this.sdPlayer][mp];
                if(mParam == sqDst)continue;
                var pcmp = this.squares[mParam];
                if((pcmp & pcOppSide) != 0 && (pcmp & PCNOMAX) != PIECE_KING){
                  return true;
                }
              }
          }
          break;
        }
        sqDst += delta;
      }
    }

    for (var i = 0; i < 8; i ++) {
      var delta = QUEEN_DELTA[i];
      var sqDst = sqSrc + delta;
      for(var j = 0; j < 2; j++){
        if(!IN_BOARD(sqDst))break;
        var pcDst = this.squares[sqDst];
        if(pcDst > 0){
          if((pcDst & PCNOMAX) == PIECE_DIAMOND)break;
          if ((pcDst & pcOppSide) != 0) {
            if((pcDst & PCNOMAX) == PIECE_DEMON){
              sqDst += delta;
              continue;
            }
            for (var k = 0; k < 8; k ++) {
              var dt2 = QUEEN_DELTA[k];
              var sqD2 = sqDst + dt2;
              for(var L = 0; L < 2; L++){
                if(!IN_BOARD(sqD2))break;
                var pcD2 = this.squares[sqD2];
                if(pcD2 > 0){
                  if (pcD2 == pcOppSide + PIECE_DEMON) {
                    return true;
                  }
                  break;
                }
                sqD2 += dt2;
              }
            }
          }
          break;
        }
        sqDst += delta;
      }
    }
    //return false;
  }
  return false;
}

Position.prototype.shieldcanattack = function(shieldsq,callersq,bopp) {
  var pcSelfSide = SIDE_TAG(this.sdPlayer);
  var pcOppSide = OPP_SIDE_TAG(this.sdPlayer);
  
  /*if(!this.bwizard4shield){
    var wpc = WIZARDPIECE[this.lastmovepc[1-this.sdPlayer]];
    this.bwizard4shield = wpc != PIECE_KING && WIZARDPIECE[wpc] != PIECE_WIZARD;
    if(this.bwizard4shield){
      this.pushPC(pcSelfSide+PIECE_WIZARD,pcSelfSide+wpc);
      var bshieldcanattack = this.shieldcanattack(shieldsq,callersq,bopp);
      this.popPC();
      this.bwizard4shield = false;
      return bshieldcanattack;
    }
  }*/

  //for (var sqSrc = 0; sqSrc < 256; sqSrc ++) {
  var sqSrc = shieldsq;{
    //对方的盾
    //if (this.squares[sqSrc] == pcOppSide + PIECE_SHIELD){
    if (bopp){
      var st = pcSelfSide;
      pcSelfSide = pcOppSide;
      pcOppSide = st;
    }
    //自己的盾
    if (this.squares[sqSrc] != pcSelfSide + PIECE_SHIELD) {
      return false;
    }
    //判断周围有没有己方棋子
    if((this.squares[sqSrc-16] & pcSelfSide) != 0 
    || (this.squares[sqSrc-15] & pcSelfSide) != 0 
    || (this.squares[sqSrc-1] & pcSelfSide) != 0 
    || (this.squares[sqSrc+15] & pcSelfSide) != 0 
    || (this.squares[sqSrc+16] & pcSelfSide) != 0 
    || (this.squares[sqSrc+17] & pcSelfSide) != 0 
    || (this.squares[sqSrc+1] & pcSelfSide) != 0 
    || (this.squares[sqSrc-17] & pcSelfSide) != 0 ){
      return true;
    }
    //判断有没有根
    //来自马
    for (var i = 0; i < 4; i ++) {
      if (this.squares[sqSrc + ADVISOR_DELTA[i]] != 0) {
        continue;
      }
      for (var j = 0; j < 2; j ++) {
        var pcDst = this.squares[sqSrc + KNIGHT_CHECK_DELTA[i][j]];
        if (pcDst == pcSelfSide + PIECE_KNIGHT) {
          return true;
        }
      }
    }
    //来自相、盾
    for (var i = 0; i < 4; i ++) {
      var pcDst = 0;
      if(this.squares[sqSrc+ADVISOR_DELTA[i]] == 0){
        pcDst = this.squares[sqSrc+2*ADVISOR_DELTA[i]];
        if(HOME_HALF(sqSrc,this.sdPlayer) && pcDst == pcSelfSide+PIECE_BISHOP){
          return true;
        }
        else if(callersq < 0 && callersq != sqSrc+2*ADVISOR_DELTA[i] && pcDst == pcSelfSide+PIECE_SHIELD){
          if(this.shieldcanattack(sqSrc+2*ADVISOR_DELTA[i],sqSrc,bopp)){
            return true;
          }
        }
      }
    }
    //来自车、王、炮
    for (var i = 0; i < 4; i ++) {
      var delta = KING_DELTA[i];
      var sqDst = sqSrc + delta;
      while (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if (pcDst > 0) {
          if (pcDst == pcSelfSide + PIECE_ROOK || (IN_FLIPFORT(this.sdPlayer, sqDst) && pcDst == pcSelfSide + PIECE_KING)) {
            return true;
          }
          break;
        }
        sqDst += delta;
      }
      sqDst += delta;
      while (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if (pcDst > 0) {
          if (pcDst == pcSelfSide + PIECE_CANNON) {
            return true;
          }
          break;
        }
        sqDst += delta;
      }
    }
    //来自龙
    for (var i = 0; i < 4; i ++) {
      var delta = ADVISOR_DELTA[i];
      var sqDst = sqSrc + delta;
      while (IN_BOARD(sqDst)) {
        var pcDst = this.squares[sqDst];
        if (pcDst > 0) {
          if (pcDst == pcSelfSide + PIECE_DRAGON) {
            return true;
          }
          break;
        }
        if(IN_DRAGONFORT(sqDst)){
          break;
        }
        sqDst += delta;
      }
    }
    //来自锋
    {
      var delta = (pcSelfSide == PCREDSIDE) ? -16 : 16;
      var sqDst = sqSrc - delta;
      if (this.squares[sqDst] == 0) {
        sqDst = sqSrc - delta;
        if (this.squares[sqDst] == pcSelfSide + PIECE_VANGUARD) {
          return true;
        }
      }
    }
	}
  return false;
}

Position.prototype.isMate = function() {
  var m = this.isMate_();
  this.kingState[2] = m;
  return m;
}

Position.prototype.isMate_ = function() {
  var mvs = this.generateMoves(null);
  for (var i = 0; i < mvs.length; i ++) {
    if (this.makeMove(mvs[i])) {
      this.undoMakeMove();
      return false;
    }
  }
  return true;
}

Position.prototype.mateValue = function() {
  return this.distance - MATE_VALUE;
}

Position.prototype.banValue = function() {
  return this.distance - BAN_VALUE;
}

Position.prototype.drawValue = function() {
  return (this.distance & 1) == 0 ? -DRAW_VALUE : DRAW_VALUE;
}

Position.prototype.evaluate = function() {
  var vl = (this.sdPlayer == 0 ? this.vlWhite - this.vlBlack :
      this.vlBlack - this.vlWhite) + ADVANCED_VALUE;
  return vl == this.drawValue() ? vl - 1 : vl;
}

Position.prototype.nullOkay = function() {
  return (this.sdPlayer == 0 ? this.vlWhite : this.vlBlack) > NULL_OKAY_MARGIN;
}

Position.prototype.nullSafe = function() {
  return (this.sdPlayer == 0 ? this.vlWhite : this.vlBlack) > NULL_SAFE_MARGIN;
}

Position.prototype.inCheck = function() {
  var c = this.inCheck_();
  this.kingState[1] = c;
  return c;
}

Position.prototype.inCheck_ = function() {
  return this.chkList[this.chkList.length - 1];
}

Position.prototype.captured = function() {
  return this.pcList[this.pcList.length - 1] > 0;
}

Position.prototype.repValue = function(vlRep) {
  var vlReturn = ((vlRep & 2) == 0 ? 0 : this.banValue()) +
      ((vlRep & 4) == 0 ? 0 : -this.banValue());
  return vlReturn == 0 ? this.drawValue() : vlReturn;
}

Position.prototype.repStatus = function(recur_) {
  var recur = recur_;
  var selfSide = false;
  var perpCheck = true;
  var oppPerpCheck = true;
  var index = this.mvList.length - 1;
  while (this.mvList[index] > 0 && this.pcList[index] == 0) {
    if (selfSide) {
      perpCheck = perpCheck && this.chkList[index];
      if (this.keyList[index] == this.zobristKey) {
        recur --;
        if (recur == 0) {
          return 1 + (perpCheck ? 2 : 0) + (oppPerpCheck ? 4 : 0);
        }
      }
    } else {
      oppPerpCheck = oppPerpCheck && this.chkList[index];
    }
    selfSide = !selfSide;
    index --;
  }
  return 0;
}

Position.prototype.mirror = function() {
  var pos = new Position();
  pos.clearBoard();
  for (var sq = 0; sq < 256; sq ++) {
    var pc = this.squares[sq];
    if (pc > 0) {
      pos.addPiece(MIRROR_SQUARE(sq), pc);
    }
  }
  if (this.sdPlayer == 1) {
    pos.changeSide();
  }
  return pos;
}

Position.prototype.bookMove = function() {
  if (typeof BOOK_DAT != "object" || BOOK_DAT.length == 0) {
    return 0;
  }
  var mirror = false;
  var lock = this.zobristLock >>> 1; // Convert into Unsigned
  var index = binarySearch(BOOK_DAT, lock);
  if (index < 0) {
    mirror = true;
    lock = this.mirror().zobristLock >>> 1; // Convert into Unsigned
    index = binarySearch(BOOK_DAT, lock);
  }
  if (index < 0) {
    return 0;
  }
  index --;
  while (index >= 0 && BOOK_DAT[index][0] == lock) {
    index --;
  }
  var mvs = [], vls = [];
  var value = 0;
  index ++;
  while (index < BOOK_DAT.length && BOOK_DAT[index][0] == lock) {
    var mv = BOOK_DAT[index][1];
    mv = (mirror ? MIRROR_MOVE(mv) : mv);
    if (this.legalMove(mv)) {
      mvs.push(mv);
      var vl = BOOK_DAT[index][2];
      vls.push(vl);
      value += vl;
    }
    index ++;
  }
  if (value == 0) {
    return 0;
  }
  value = Math.floor(Math.random() * value);
  for (index = 0; index < mvs.length; index ++) {
    value -= vls[index];
    if (value < 0) {
      break;
    }
  }
  return mvs[index];
}

Position.prototype.historyIndex = function(mv) {
  //return ((this.squares[SRC(mv)] - PCNUM) << 8) + DST(mv);
  return (mv & 0xffff);
}

Position.prototype.bDragon = function(sd) {
  return this.squares[sd] > 0;
}

Position.prototype.bStealth = function(sd) {
  var pcSelfSide = SIDE_TAG(sd);
  for(var i = 16; i < 20; i++){
    if((this.squares[i] & pcSelfSide) != 0)return true;
  }
  return false;
}

Position.prototype.pushPC = function(spc,dpc) {
  for (var sqSrc = 0; sqSrc < 256; sqSrc ++) {
    var pcSrc = this.squares[sqSrc];
    if(pcSrc == spc){
      this.pushpclist.push(pcSrc);
      this.pushsqlist.push(sqSrc);
      this.squares[sqSrc] = dpc;
    }
  }
}

Position.prototype.popPC = function() {
  while(this.pushpclist.length > 0){
    this.squares[this.pushsqlist.pop()] = this.pushpclist.pop();
  }
}
